<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradingPlatform.BusinessLayer</name>
    </assembly>
    <members>
        <member name="T:TradingPlatform.BusinessLayer.Chart.IChart">
            <summary>
            Access to the chart panel
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.ID">
            <summary>
            Chart panel unique ID
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.Windows">
            <summary>
            Collection of chart windows
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.BarsWidth">
            <summary>
            Current X scale value - width of the bar in pixels
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.CurrentTimeZone">
            <summary>
            Provides time zone of current chart.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.Account">
            <summary>
            Provides account of current chart.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.CurrentSessionContainer">
            <summary>
            Provides custom sessions of current chart.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.TickSize">
            <summary>
            Current tick size of the chart
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.MainWindow">
            <summary>
            Main window of the chart
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.RightOffset">
            <summary>
            Current right offset value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChart.Drawings">
            <summary>
            Collection of chart drawingsCollection
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChart.Refresh">
            <summary>
            Force chart refreshing
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseDown">
            <summary>
            The MouseDown event occurs when the mouse button is pressed down
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseUp">
            <summary>
            The MouseUp event occurs when the mouse button is released
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseClick">
            <summary>
            The MouseClick event occurs when the mouse button is clicked
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseMove">
            <summary>
            The MouseMove event occurs when the mouse moving over the chart
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseWheel">
            <summary>
            The MouseDown event occurs when the user scrolling mouse wheel
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseEnter">
            <summary>
            The MouseDown event occurs when the mouse enter the chart
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.MouseLeave">
            <summary>
            The MouseDown event occurs when the mouse leave the chart
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.SettingsChanged">
            <summary>
            The SettingsChanged event occurs when any settings were changed
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChart.AccountChanged">
            <summary>
            The AccountChanged event occurs when the account was changed
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection">
            <summary>
            Access to the chart drawingsCollection collection
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.Add(TradingPlatform.BusinessLayer.Chart.IDrawing)">
            <summary>
            Add chart drawing to the collection
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.Remove(TradingPlatform.BusinessLayer.Chart.IDrawing)">
            <summary>
            Remove specified chart drawing from collection
            </summary>
            <param name="drawing"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.FindById(System.String)">
            <summary>
            Get chart drawing by ID
            </summary>
            <param name="drawingId"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.GetAll(TradingPlatform.BusinessLayer.Symbol)">
            <summary>
            Get all chart drawingsCollection assigned to specified symbol
            </summary>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.Added">
            <summary>
            The Added events occured, when new chart drawing was added to collection
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.Moved">
            <summary>
            The Moved events occured, when chart drawing was moved
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.Removed">
            <summary>
            The Removed events occured, when chart drawing was removed from the collection
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Chart.IChartDrawingsCollection.SelectionChanged">
            <summary>
            The SelectionChanged events occured, when selected chart drawing was changed
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Chart.IChartWindow">
            <summary>
            Access to the particular window from chart panel
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChartWindow.ClientRectangle">
            <summary>
            Client rectangle of the chart window
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChartWindow.IsMainWindow">
            <summary>
            Determines, whether this window is the main window of the chart
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChartWindow.WindowNumber">
            <summary>
            Chart window number
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChartWindow.CoordinatesConverter">
            <summary>
            Special object, allows you to convert values from x/y scale to Time/Price and back
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IChartWindow.YScaleFactor">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter">
            <summary>
            Converter between x/y and Time/Price scales
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter.GetTime(System.Double)">
            <summary>
            Get the DateTime value that is corresponding to specified x coordinate
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter.GetPrice(System.Double)">
            <summary>
            Get the Price value that is corresponding to specified y coordinate
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter.GetChartX(System.DateTime)">
            <summary>
            Get the X coordinate that is corresponding to specified DateTime value
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter.GetChartY(System.Double)">
            <summary>
            Get the Y coordinate that is corresponding to specified price value
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IChartWindowCoordinatesConverter.GetBarIndex(System.DateTime)">
            <summary>
            Get the bar index that is corresponding to specified DateTime value
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Chart.IDrawing">
            <summary>
            Access to the chart drawing
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IDrawing.CreationMode">
            <summary>
            Determines, the way how chart drawing was created: manually or programmatically
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IDrawing.Availability">
            <summary>
            Determines, the availability of drawing - only current chart or all charts with same symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IDrawing.Id">
            <summary>
            The unique ID of the chart drawing
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IDrawing.MoveToBackground">
            <summary>
            Determines, whether chart drawing draws above or below the main chart
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Chart.IDrawing.State">
            <summary>
            Determines, state of the chart drawing: Locked or Unlocked
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IDrawing.GetPoint(System.Int32)">
            <summary>
            Get time and price of the particular point of the chart drawing
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Chart.IDrawing.SetPoint(System.Int32,System.DateTime,System.Double)">
            <summary>
            Set time and price value for particular point of the chart drawing
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Symbols">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.SymbolTypes">
            <summary>
            Gets symbol types list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Accounts">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.Account"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Assets">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.Asset"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Exchanges">
            <summary>
            Gets Exchanges list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Orders">
            <summary>
            Gets Orders list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.OrderTypes">
            <summary>
            Gets Order Types list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.Positions">
            <summary>
            Gets Positions list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.ClosedPositions">
            <summary>
            Gets Closed Positions list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.CorporateActions">
            <summary>
            Gets Corporate Actions list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.ReportTypes">
            <summary>
            Gets Report Types list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IBusinessObjectsProvider.TradingSignals">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.TradingSignal"/>s list
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Integration.ConnectionResult">
            <summary>
            Vendor connection respond bundle
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.ConnectionResult.State">
            <summary>
            The connection status
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.ConnectionResult.Message">
            <summary>
            The respond message
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Integration.PingEnum">
            <summary>
            Ping state dictum
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Integration.PingEnum.Connected">
            <summary>
            Ping signals connected
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Integration.PingEnum.Disconnected">
            <summary>
            Ping signals disconnected
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Integration.AssetFormattingDescription">
            <summary>
            The asset formatting description.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.AssetFormattingDescription.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Integration.AssetFormattingDescription"/> class.
            </summary>
            <param name="assetId">The asset id.</param>
            <param name="value">The value.</param>
            <param name="addCurrencyName">If true, add currency name.</param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Integration.HistoryMetadata">
            <summary>
            Mediates a history meta data with available data types and intervals on vendor side
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.MessageAsset.Id">
            <summary>
            Asset id bearer
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.MessageAsset.Name">
            <summary>
            Asset name bearer
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.MessageAsset.Description">
            <summary>
            Asset description
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.MessageCryptoAssetBalances.AssetId">
            <summary>
            Asset id bearer
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.Connect(TradingPlatform.BusinessLayer.Integration.ConnectRequestParameters)">
            <summary>
            Performs a binding with broker or data provider
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.Disconnect">
            <summary>
            Specifies any operation before breaking a connection with broker or data provider
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.OnConnected(System.Threading.CancellationToken)">
            <summary>
            Called when platform finished retreiving all required informations from vendor during connecting
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.Ping">
            <summary>
            Ping processing before its visualization in the terminal
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetAccounts(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about available accounts. Yon need to specify at least one account
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.MultiVendor.AllowNonFixedList">
            <summary>
            Confirms allowed nonfixed list by vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetExchanges(System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of available exchange markets from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetAssets(System.Threading.CancellationToken)">
            <summary>
            Retrieves information about available assets.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetSymbols(System.Threading.CancellationToken)">
            <summary>
            Retrieves information about available symbols.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetSymbolTypes(System.Threading.CancellationToken)">
            <summary>
            Gets an available symbols types from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetNonFixedSymbol(TradingPlatform.BusinessLayer.GetSymbolRequestParameters)">
            <summary>
            Derives a non fixed symbol from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.SearchSymbols(TradingPlatform.BusinessLayer.SearchSymbolsRequestParameters)">
            <summary>
            Derives a non-fixed list of symbols from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetAllowedOrderTypes(System.Threading.CancellationToken)">
            <summary>
            Retrieves allowed/supported order types
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetPendingOrders(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about opened orders at the time of connection.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetPositions(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about positions at the time of connection
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetTrades(TradingPlatform.BusinessLayer.TradesHistoryRequestParameters)">
            <summary>
            Gets trades history from server for requested time range
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.SubscribeSymbol(TradingPlatform.BusinessLayer.SubscribeQuotesParameters)">
            <summary>
            Subscribing to quote data: Level1/Level2/Trade
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.UnSubscribeSymbol(TradingPlatform.BusinessLayer.SubscribeQuotesParameters)">
            <summary>
            Unsubscribing from quote data: Level1/Level2/Trade
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetHistoryMetadata(System.Threading.CancellationToken)">
            <summary>
            Gets a list of supported historical intervals and data types by vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.PlaceOrder(TradingPlatform.BusinessLayer.PlaceOrderRequestParameters)">
            <summary>
            Prepare and sending order placing request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.ModifyOrder(TradingPlatform.BusinessLayer.ModifyOrderRequestParameters)">
            <summary>
            Sending order modification request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.CancelOrder(TradingPlatform.BusinessLayer.CancelOrderRequestParameters)">
            <summary>
            Sending order cancellation request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.ClosePosition(TradingPlatform.BusinessLayer.ClosePositionRequestParameters)">
            <summary>
            Sending position closing request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GetReportsMetaData(System.Threading.CancellationToken)">
            <summary>
            Gets information about available reports from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.MultiVendor.GenerateReport(TradingPlatform.BusinessLayer.ReportRequestParameters)">
            <summary>
            Called when platform need to generate particular report
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Integration.PingResult">
            <summary>
            Ping respond bundle
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.PingResult.PingTime">
            <summary>
            Ping time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.PingResult.RoundTripTime">
            <summary>
            Time spent for single request
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.PingResult.State">
            <summary>
            Ping state
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.Connect(TradingPlatform.BusinessLayer.Integration.ConnectRequestParameters)">
            <summary>
            Performs a binding with broker or data provider
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.Disconnect">
            <summary>
            Specifies any operation before breaking a connection with broker or data provider
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.OnConnected(System.Threading.CancellationToken)">
            <summary>
            Called when platform finished retreiving all required informations from vendor during connecting
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.Ping">
            <summary>
            Ping processing before its visualization in the terminal
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetAccounts(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about available accounts. Yon need to specify at least one account
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetExchanges(System.Threading.CancellationToken)">
            <summary>
            Retrieves a collection of available exchange markets from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetAssets(System.Threading.CancellationToken)">
            <summary>
            Retrieves information about available assets.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetAllOptionSeries(System.Threading.CancellationToken)">
            <summary>
            Retrieves information about available symbols.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetSymbolTypes(System.Threading.CancellationToken)">
            <summary>
            Gets an available symbols types from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetNonFixedSymbol(TradingPlatform.BusinessLayer.GetSymbolRequestParameters)">
            <summary>
            Derives a non fixed symbol from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.SearchSymbols(TradingPlatform.BusinessLayer.SearchSymbolsRequestParameters)">
            <summary>
            Derives a non-fixed list of symbols from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetPendingOrders(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about opened orders at the time of connection.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetPositions(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about positions at the time of connection
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetClosedPositions(System.Threading.CancellationToken)">
            <summary>
            Retrieves an information about closed positions at the time of connection
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.SubscribeSymbol(TradingPlatform.BusinessLayer.SubscribeQuotesParameters)">
            <summary>
            Subscribing to quote data: Level1/Level2/Trade
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.UnSubscribeSymbol(TradingPlatform.BusinessLayer.SubscribeQuotesParameters)">
            <summary>
            Unsubscribing from quote data: Level1/Level2/Trade
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetHistoryMetadata(System.Threading.CancellationToken)">
            <summary>
            Gets a list of supported historical intervals and data types by vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.PlaceOrder(TradingPlatform.BusinessLayer.PlaceOrderRequestParameters)">
            <summary>
            Prepare and sending order placing request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.ModifyOrder(TradingPlatform.BusinessLayer.ModifyOrderRequestParameters)">
            <summary>
            Sending order modification request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.CancelOrder(TradingPlatform.BusinessLayer.CancelOrderRequestParameters)">
            <summary>
            Sending order cancellation request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.ClosePosition(TradingPlatform.BusinessLayer.ClosePositionRequestParameters)">
            <summary>
            Sending position closing request to broker
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetReportsMetaData(System.Threading.CancellationToken)">
            <summary>
            Gets information about available reports from vendor
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GenerateReport(TradingPlatform.BusinessLayer.ReportRequestParameters)">
            <summary>
            Called when platform need to generate particular report
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Integration.Vendor.GetAllowedOrderTypes(System.Threading.CancellationToken)">
            <summary>
            Retrieves allowed/supported order types
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Integration.Vendor.AllowNonFixedList">
            <summary>
            Confirms allowed non fixed list by vendor
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Integration.VendorMetaData.GetConnectionParameters">
            <summary>
            Gets a settings list from a vendor selection of the setup window
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.GroupId">
            <summary>
            The ID of the order group. This group created when trades done by the MAM account.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.TotalQuantity">
            <summary>
            Total quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.OrderType">
            <summary>
            Gets OrderType
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.Price">
            <summary>
            Gets order price value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.TriggerPrice">
            <summary>
            Gets order trigger price value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.TrailOffset">
            <summary>
            Gets order trailing offset value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.Status">
            <summary>
            Gets orders current status
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.LastUpdateTime">
            <summary>
            Gets orders last update time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.PositionId">
            <summary>
            Gets Position Id.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.StopLoss">
            <summary>
            Gets StopLoss holder for given order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.TakeProfit">
            <summary>
            Gets TakeProfit holder for given order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.OrderTypeId">
            <summary>
            Orders Type Id. It is used for the orders type comparing.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.TimeInForce">
            <summary>
            Gets order TIF(Time-In-Force) type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.ExpirationTime">
            <summary>
            Gets orders expiration time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.RemainingQuantity">
            <summary>
            Remaining quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.FilledQuantity">
            <summary>
            Filled quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IOrder.OriginalStatus">
            <summary>
            Gets open order original status
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.IOrder.Updated">
            <summary>
            Will be triggered on each <see cref="M:TradingPlatform.BusinessLayer.Order.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenOrder)"/> invocation
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.RangeIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.TimeLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.Value">
            <summary>
            Get VWAP value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.STDCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.CumulativeVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.CumulativePriceMVolume">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Abstractions.IVwapHistoryItem.MPDCoefficient">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Serialization.SnapshotData">
            <summary>
            Снапшот для эмулятора
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Serialization.Serializer.VERSION">
            <summary>
            Текущая версия для сериализации. Если что-то меняем и нужно делать поддержку старого формата
            можно использовать версию.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Serialization.Serializer.VERSION_NEW_CONNECTIONS_SCHEMA">
            <summary>
            Version 1.1: изменилась схема работы с коннектами: стали доступны кастомные коннекты
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.IVolumeAnalysisItem">
            <summary>
            Defines 'Volume Analysis' calculation result item 
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Account">
            <summary>
            Contains all user's account information
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Account.Id">
            <summary>
            Gets account unique code.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Account.Name">
            <summary>
            Obtaining account name.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Account.AccountCurrency">
            <summary>
            Gets base currency of account. Account CCY is always equal to the server CCY in AlgoStudio
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Account.Balance">
            <summary>
            Gets current balance of the account.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Account.AdditionalInfo">
            <summary>
            Gets additional account information
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Account.Updated">
            <summary>
            Will be triggered on each account information updating
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Account.ToString">
            <summary>
            Gets Account name
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Account.CreateInfo">
            <summary>
            Creates a business object info with an Account data which can be used for the restoring/serialization process.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AccountOperation">
            <summary>
            The account operation.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AccountOperation.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AccountOperation.ButtonText">
            <summary>
            Gets the button text.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AccountOperation.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AccountOperation.Update(System.Collections.Generic.IList{TradingPlatform.BusinessLayer.SettingItem})">
            <summary>
            
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AccountOperation.BuildConfirmation(System.Collections.Generic.IList{TradingPlatform.BusinessLayer.SettingItem})">
            <summary>
            Builds the confirmation.
            </summary>
            <param name="settings">The settings.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AccountOperation.Execute(System.Collections.Generic.IList{TradingPlatform.BusinessLayer.SettingItem})">
            <summary>
            
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AccountOperation.CompareTo(System.Object)">
            <summary>
            Compare to.
            </summary>
            <param name="obj">The obj.</param>
            <returns>An int.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AdditionalInfoCollection">
            <summary>
            The additional info collection.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoCollection.Items">
            <summary>
            Gets the items.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.AdditionalInfoCollection"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoCollection.#ctor(TradingPlatform.BusinessLayer.AdditionalInfoItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.AdditionalInfoCollection"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoCollection.TryGetItem(System.String,TradingPlatform.BusinessLayer.AdditionalInfoItem@)">
            <summary>
            Try get item.
            </summary>
            <param name="apiKey">The api key.</param>
            <param name="item">The item.</param>
            <returns>A bool.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns><![CDATA[IEnumerator<AdditionalInfoItem>]]></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoCollection.ToString">
            <summary>
            Tos the string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ComparingType">
            <summary>
            The comparing type.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AdditionalInfoItemFormatingType">
            <summary>
            The additional info item formating type.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AdditionalInfoItem">
            <summary>
            The additional info item.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.Id">
            <summary>
            ключ для апи, обязательно для заполнения и должен быть уникальным
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.GroupInfo">
            <summary>
            Gets or Sets the group info.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.SortIndex">
            <summary>
            Gets or Sets the sort index.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.NameKey">
            <summary>
            Gets or Sets the name key.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.ToolTipKey">
            <summary>
            Gets or Sets the tool tip key.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.DataType">
            <summary>
            Gets or Sets the data type.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.Value">
            <summary>
            Gets or Sets the value.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.Hidden">
            <summary>
            Gets or Sets a value indicating whether hidden.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.FormatingType">
            <summary>
            Gets or Sets the formating type.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.CustomAssetID">
            <summary>
            используется в связке с AccountAdditionalInfoItemFormatingType.CustomAsset для форматирования в заданном ассете
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.Visible">
            <summary>
            Gets or Sets a value indicating whether visible.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.IsLink">
            <summary>
            Gets or Sets a value indicating whether is link.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.EditingInfo">
            <summary>
            Gets or Sets the editing info.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdditionalInfoItem.FormattingDescription">
            <summary>
            Gets or Sets the formatting description.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.AdditionalInfoItem"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.Update(TradingPlatform.BusinessLayer.AdditionalInfoItem)">
            <summary>
            
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.Clone">
            <summary>
            
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.ToXElement">
            <summary>
            To the XML element.
            </summary>
            <returns>A XElement.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)">
            <summary>
            From the XML element.
            </summary>
            <param name="element">The element.</param>
            <param name="deserializationInfo">The deserialization info.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdditionalInfoItem.ToString">
            <summary>
            To the string.
            </summary>
            <returns>A string.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Asset">
            <summary>
            Defines asset entity
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.Id">
            <summary>
            Asset id bearer
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.Name">
            <summary>
            Asset name bearer
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.Description">
            <summary>
            Asset description
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.MinimumChange">
            <summary>
            Defines a number precision of the change value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.Precision">
            <summary>
            Gets precision value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Asset.IsoCode">
            <summary>
            Gets asset ISO 4217 code
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Asset.#ctor(System.String)">
            <summary>
            Creates an Asset instance
            </summary>
            <param name="connectionId">given connection Id</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Asset.FormatPrice(System.Double)">
            <summary>
            Formats price into precision normalized string
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Asset.FormatPriceWithCurrency(System.Double)">
            <summary>
            Formats price into concatenated string which contains the precision normalized value and Asset's name
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Asset.ToString">
            <summary>
            Gets Asset name
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Asset.CompareTo(System.Object)">
            <summary>
            Uses comparison by Assets names
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.BusinessObject.UniqueId">
            <summary>
            Unique ID during active session. Don't use for serialization
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SymbolType">
            <summary>
            Договориль использовать множественное число для типа инструмента
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.SymbolType.Debentures">
            <summary>
            Завели для индийской интеграции
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.CorporateAction">
            <summary>
            Represents information about corporate action.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.CorporateAction.DateTime">
            <summary>
            Get the date and time when trade was executed
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.CorporateAction.Updated">
            <summary>
            Will be triggered on corporate action updating
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.CustomSymbol">
            <summary>
            Base class for all Custom symbols: Synthetics, Custom Formulas, etc.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Synthetic.CreateHistoricalData(TradingPlatform.BusinessLayer.HistoryRequestParameters)">
            <summary>
            alexb: нам достаточно подставлять правильный HistoricalData - он сделает всю работу
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticCalculations.CalculateLevel1(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.DateTime[],TradingPlatform.BusinessLayer.SyntheticPriceModifier)">
            <summary>
            Расчёт Bid/Ask/BidSize/AskSize для синтетика
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticCalculations.CalculateLast(System.Double[],System.Double[],System.Double[],System.DateTime[],TradingPlatform.BusinessLayer.SyntheticPriceModifier)">
            <summary>
            Расчёт Last/LastSize для синтетика
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticCalculations.CalculateLevel2(System.Double[],TradingPlatform.BusinessLayer.Integration.QuotePriceType,System.String,TradingPlatform.BusinessLayer.Level2Item[][],TradingPlatform.BusinessLayer.SyntheticPriceModifier)">
            <summary>
            Расчёт Level2 для синтетика
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticCalculations.CalculateDayBar(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.DateTime[],TradingPlatform.BusinessLayer.SyntheticPriceModifier)">
            <summary>
            Расчёт DayBar для синтетика
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticCalculations.CalculateHistoryItem(System.Double[],TradingPlatform.BusinessLayer.IHistoryItem[],TradingPlatform.BusinessLayer.SyntheticPriceModifier)">
            <summary>
            Расчёт бара для синтетика
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SyntheticHistorySynhroniser.MoveNext(System.Threading.CancellationToken)">
            <summary>
            Increment current position
            </summary>        
        </member>
        <member name="E:TradingPlatform.BusinessLayer.DeliveredAsset.Updated">
            <summary>
            Will be triggered on each <see cref="M:TradingPlatform.BusinessLayer.DeliveredAsset.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenDeliveredAsset)"/> invocation 
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.DeliveredAsset.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenDeliveredAsset)">
            <summary>
            Applies an position modificaion or position changing by accepting a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Exchange">
            <summary>
            Contains all information which belong to the given exchange
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Exchange.Id">
            <summary>
            Gets Exchange Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Exchange.ExchangeName">
            <summary>
            Gets Exchange name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Exchange.SortIndex">
            <summary>
            Used for the Exchanges comparing
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Exchange.CompareTo(System.Object)">
            <summary>
            Compares Exchnges in order by next - SortIndex, Exchange name, Connection Id, Exchange Id.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SymbolGroup">
            <summary>
            Provides possibility to group and sort symbols for each connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SymbolGroup.Id">
            <summary>
            Gets group Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SymbolGroup.GroupName">
            <summary>
            Gets group name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SymbolGroup.SortIndex">
            <summary>
            Gets sort index for comparing process
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Order">
            <summary>
            Represents trading information about pending order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.GroupId">
            <summary>
            The ID of the order group. This group created when trades done by the MAM account.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.PositionId">
            <summary>
            Gets Position Id.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.TotalQuantity">
            <summary>
            Total quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.FilledQuantity">
            <summary>
            Filled quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.RemainingQuantity">
            <summary>
            Remaining quantity of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.OrderTypeId">
            <summary>
            Orders Type Id. It is used for the orders type comparing.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.OrderType">
            <summary>
            Gets OrderType
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.Price">
            <summary>
            Gets order price value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.TriggerPrice">
            <summary>
            Gets order trigger price value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.TrailOffset">
            <summary>
            Gets order trailing offset value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.Status">
            <summary>
            Gets orders current status
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.OriginalStatus">
            <summary>
            Gets open order original status
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.TimeInForce">
            <summary>
            Gets order TIF(Time-In-Force) type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.ExpirationTime">
            <summary>
            Gets orders expiration time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.LastUpdateTime">
            <summary>
            Gets orders last update time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.StopLoss">
            <summary>
            Gets StopLoss holder for given order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Order.TakeProfit">
            <summary>
            Gets TakeProfit holder for given order
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Order.Updated">
            <summary>
            Will be triggered on each <see cref="M:TradingPlatform.BusinessLayer.Order.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenOrder)"/> invocation
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Order.#ctor(System.String)">
            <summary>
            Creates Order instance
            </summary>
            <param name="connectionId"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Order.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenOrder)">
            <summary>
            Applies an order modificaion or order changing by accepting a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Order.Cancel(System.String)">
            <summary>
            Cancels pending order
            </summary>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.OrderHistory">
            <summary>
            Represents an <see cref="T:TradingPlatform.BusinessLayer.Order"/> wrapper
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Position">
            <summary>
            Represents trading information about related position
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Position.Updated">
            <summary>
            Will be triggered on each <see cref="M:TradingPlatform.BusinessLayer.Position.UpdateByMessage(TradingPlatform.BusinessLayer.Integration.MessageOpenPosition)"/> and <see cref="M:TradingPlatform.BusinessLayer.Position.UpdatePnl(TradingPlatform.BusinessLayer.PnL)"/> invocation
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.Quantity">
            <summary>
            Gets position quantity value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.OpenPrice">
            <summary>
            Gets position open order price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.OpenTime">
            <summary>
            Gets position openning time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.GrossPnL">
            <summary>
            Gets Profit/loss (without swaps or commissions) all calculated based on the current broker's price. For open position it shows the profit/loss you would make if you close the position at the current price. If position closed, this parameter show profit/loss what trader have after closing this position.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.NetPnL">
            <summary>
            Gets Profit/loss calculated based on the current broker's price. For open position it shows the profit/loss you would make if you close the position at the current price. If position closed, this parameter show profit/loss what trader have after closing this position.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.Fee">
            <summary>
            Gets fee amount for the position.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.Swaps">
            <summary>
            Gets PnL swaps
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.CurrentPrice">
            <summary>
            The market price obtainable from your broker.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Position.Close(System.Double)">
            <summary>
            Closes position if quantity is not specified else - uses partial closing operation.
            </summary>
            <param name="closeQuantity"></param>
            <returns></returns>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.StopLoss">
            <summary>
            Gets StopLoss order which belongs to the position
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.TakeProfit">
            <summary>
            Gets TakeProfit order which belongs to the position
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Position.GrossPnLTicks">
            <summary>
            Returns ticks amount between open and current price.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Report">
            <summary>
            Represents a report grid which can hold system reports based on <see cref="T:TradingPlatform.BusinessLayer.ReportRow"/>s and <see cref="T:TradingPlatform.BusinessLayer.ReportColumn"/>s content.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Report.Columns">
            <summary>
            Columns collection 
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Report.Rows">
            <summary>
            Rows collection 
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Report.#ctor">
            <summary>
            Initializes report grid
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Report.AddColumn(System.String,TradingPlatform.BusinessLayer.ComparingType,TradingPlatform.BusinessLayer.ColouringModes)">
            <summary>
            Adds coloring column to the report
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Report.AddColumn(System.String,TradingPlatform.BusinessLayer.ComparingType)">
            <summary>
            Adds default(non-colored) column to the report
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ReportCell">
            <summary>
            Exposes report cell decoration
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ReportCell.Label">
            <summary>
            Cell label
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ReportCell.Value">
            <summary>
            Cell value
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ReportColumn">
            <summary>
            Exposes report column decoration
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ReportColumn.Header">
            <summary>
            Header of the column
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ReportColumn.ValueType">
            <summary>
            Column value type
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ReportRow">
            <summary>
            Exposes report row decoration
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ReportRow.Cells">
            <summary>
            A collection of cells
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ReportRow.#ctor">
            <summary>
            Initializes cells in the row
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ReportRow.AddCell(System.String,System.Object,TradingPlatform.BusinessLayer.Integration.IFormattingDescription)">
            <summary>
            Adds cells to the row by label and value
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ReportRow.AddCell(System.Object,TradingPlatform.BusinessLayer.Integration.IFormattingDescription)">
            <summary>
            Adds cells to the row by value only
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ReportType">
            <summary>
            Defines report request parameters from <see cref="P:TradingPlatform.BusinessLayer.ICustomizable.Settings"/> which can be used in <see cref="T:TradingPlatform.BusinessLayer.ReportRequestParameters"/>
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ReportType.Id">
            <summary>
            Gets report Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ReportType.Name">
            <summary>
            Gets report Name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ReportType.Settings">
            <summary>
            <see cref="T:TradingPlatform.BusinessLayer.ICustomizable"/> report settings 
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.RulesManager">
            <summary>
            Represents a permisions checking tool which use next priority order <see cref="T:TradingPlatform.BusinessLayer.Connection"/>, <see cref="T:TradingPlatform.BusinessLayer.Account"/>, <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.OrderType"/>
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Symbol">
            <summary>
            Represent access to symbol information and properties.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Id">
            <summary>
            Gets symbol Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Name">
            <summary>
            Gets symbol name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Description">
            <summary>
            Gets symbol description
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.SymbolType">
            <summary>
            Gets symbol type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Product">
            <summary>
            Gets symbol base Asset
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.QuotingCurrency">
            <summary>
            Gets symbol counter Asset
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Exchange">
            <summary>
            Gets Exchange of current symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.ExchangeId">
            <summary>
            Gets Exchange id of current symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.QuoteDelay">
            <summary>
            Returns delay with which quote come in platform.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AdditionalInfo">
            <summary>
            Gets symbol additional info
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.MaxLot">
            <summary>
            The highest trade allowed
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.MinLot">
            <summary>
            The lowest trade allowed
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.NettingType">
            <summary>
            Gets symbol NettingType
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Group">
            <summary>
            Gets SymbolGroup
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.QuotingType">
            <summary>
            Gets current SymbolQuotingType
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.LotSize">
            <summary>
            Amount of base asset <see cref="P:TradingPlatform.BusinessLayer.Symbol.Product"/> for one lot.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.VariableTickList">
            <summary>
            Stores list of symbol ticksizes
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Symbol.tickSizeCached">
            <summary>
            Cached value of TickSize (if 1 level)
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.LotStep">
            <summary>
            Step of the lot changes
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.NotionalValueStep">
            <summary>
            Step of the notional value changes
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.ExpirationDate">
            <summary>
            Gets derivative expiration date
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.LastTradingDate">
            <summary>
            Gets derivative last trading date
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.MaturityDate">
            <summary>
            Gets derivative maturity date
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.StrikePrice">
            <summary>
            Gets derivative strike price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.OptionStyle">
            <summary>
            Gets derivative option style
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.OptionType">
            <summary>
            Gets derivative option type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.OptionSerie">
            <summary>
            Gets derivative option serie
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Root">
            <summary>
            Gets derivative underlier name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Underlier">
            <summary>
            Gets derivative underlier symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.UnderlierId">
            <summary>
            Gets derivative underlier symbol id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Ask">
            <summary>
            Gets Ask price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AskSize">
            <summary>
            Gets Ask size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Bid">
            <summary>
            Gets Bid price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.BidSize">
            <summary>
            Gets Bid size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.QuoteDateTime">
            <summary>
            Gets quote time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Last">
            <summary>
            Gets last price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.LastSize">
            <summary>
            Gets last size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.LastDateTime">
            <summary>
            Gets last time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Mark">
            <summary>
            Gets mark price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.MarkSize">
            <summary>
            Gets mark size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Open">
            <summary>
            Gets open price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.PrevClose">
            <summary>
            Gets previous close price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.High">
            <summary>
            Gets high price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Low">
            <summary>
            Gets low price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Volume">
            <summary>
            Gets volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.QuoteAssetVolume">
            <summary>
            Gets quote asset volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.PrevSettlement">
            <summary>
            Gets PrevSettlement value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Ticks">
            <summary>
            Gets ticks amount
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Trades">
            <summary>
            Gets trades amount
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.DepthOfMarket">
            <summary>
            Gets Level2 data
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Spread">
            <summary>
            Gets spread value between Bid and Ask
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.SpreadPercentage">
            <summary>
            Gets <see cref="P:TradingPlatform.BusinessLayer.Symbol.Spread"/> percentage value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.Change">
            <summary>
            Gets change value between Bid/Last and Close price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.ChangePercentage">
            <summary>
            Gets <see cref="P:TradingPlatform.BusinessLayer.Symbol.Change"/> percentage value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.HistoryType">
            <summary>
            Default history type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.HistoryMetadata">
            <summary>
            List of all available history types
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.VolumeType">
            <summary>
            Gets SymbolVolumeType
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.VolumeAnalysisMetadata">
            <summary>
            List of all available history types
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Symbol.NewQuote">
            <summary>
            Will be triggered when new Level1 quote is comming
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Symbol.NewLevel2">
            <summary>
            Will be triggered when new Level2 quote is comming
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Symbol.NewLast">
            <summary>
            Will be triggered when new trade quote is comming
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Symbol.NewDayBar">
            <summary>
            Will be triggered when new correctional quote is comming from the vendor.
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Symbol.Updated">
            <summary>
            Will be triggered when symbol updated.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AllowCalculateRealtimeTicks">
            <summary>
            Gets real time <see cref="P:TradingPlatform.BusinessLayer.Symbol.Ticks"/> calculation setting
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AllowCalculateRealtimeTrades">
            <summary>
            Gets real time <see cref="P:TradingPlatform.BusinessLayer.Symbol.Trades"/> calculation setting
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AllowCalculateRealtimeVolume">
            <summary>
            Gets real time <see cref="P:TradingPlatform.BusinessLayer.Symbol.Volume"/> calculation setting
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.AllowCalculateRealtimeChange">
            <summary>
            Gets real time <see cref="P:TradingPlatform.BusinessLayer.Symbol.Change"/> calculation setting
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetHistory(TradingPlatform.BusinessLayer.Period,System.DateTime,System.DateTime)">
            <summary>
            Gets historical data according to period and other parameters
            </summary>
            <param name="period"></param>
            <param name="fromTime"></param>
            <param name="toTime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetHistory(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.HistoryType,System.DateTime,System.DateTime)">
            <summary>
            Gets historical data according to period and other parameters
            </summary>
            <param name="period"></param>
            <param name="historyType"></param>
            <param name="fromTime"></param>
            <param name="toTime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetHistory(TradingPlatform.BusinessLayer.HistoryAggregation,System.DateTime,System.DateTime)">
            <summary>
            Gets historical data according to aggregation and other parameters
            </summary>
            <param name="aggregation"></param>
            <param name="historyType"></param>
            <param name="fromTime"></param>
            <param name="toTime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetHistory(TradingPlatform.BusinessLayer.HistoryRequestParameters)">
            <summary>
            Gets historical data according to given history request
            </summary>
            <param name="historyRequestParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetTickHistory(TradingPlatform.BusinessLayer.HistoryType,System.DateTime,System.DateTime)">
            <summary>
            Gets historical ticks data according to given parameters
            </summary>
            <param name="historyType"></param>
            <param name="fromTime"></param>
            <param name="toTime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.RoundPriceToTickSize(System.Double,System.Double)">
            <summary>
            Returns rounded to <see cref="P:TradingPlatform.BusinessLayer.Symbol.TickSize"/> price
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.CalculatePrice(System.Double,System.Double)">
            <summary>
            Calculates new price which equal to given price shifted by a number of given ticks
            </summary>
            <param name="price"></param>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.CalculateTicks(System.Double,System.Double)">
            <summary>
            Calculates ticks between two prices
            </summary>
            <param name="price1"></param>
            <param name="price2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetTickSize(System.Double)">
            <summary>
            Gets cached symbol tick size or retrives it from the <see cref="T:TradingPlatform.BusinessLayer.VariableTick"/> list
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetTickCost(System.Double)">
            <summary>
            Gets symbol tick cost retrived from the <see cref="T:TradingPlatform.BusinessLayer.VariableTick"/> list by price
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.FindVariableTick(System.Double)">
            <summary>
            Returns VariableTick if it can be retrived from <see cref="T:TradingPlatform.BusinessLayer.VariableTick"/> list by price or null
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Symbol.TickSize">
            <summary>
            Gets cached tick size if it available, else tries to obtain <see cref="M:TradingPlatform.BusinessLayer.Symbol.GetTickSize(System.Double)"/> with Last, Bid, Ask, first element of <see cref="T:TradingPlatform.BusinessLayer.VariableTick"/> list otherwise - <see cref="F:TradingPlatform.BusinessLayer.Utils.Const.DOUBLE_UNDEFINED"/>
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.FormatPrice(System.Double)">
            <summary>
            Formats price value to the appropriative string with a counting on tick precision.
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.FormatPriceWithMaxPrecision(System.Double)">
            <summary>
            Formats price value to the appropriative string with a counting on max tick precision.
            </summary>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.FormatOffset(System.Double,System.String)">
            <summary>
            Returns string with formatted ticks value
            </summary>
            <param name="offset"></param>
            <param name="dimension"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.CompareTo(TradingPlatform.BusinessLayer.Symbol)">
            <summary>
            Comparing by <see cref="P:TradingPlatform.BusinessLayer.Symbol.Name"/> value
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetAlowedOrderTypes(System.Nullable{TradingPlatform.BusinessLayer.OrderTypeUsage})">
            <summary>
            Gets symbol orders types list which are allowed.
            </summary>
            <param name="usage"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.PlaceOrder(TradingPlatform.BusinessLayer.PlaceOrderRequestParameters)">
            <summary>
            Process order placing with given request parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Symbol.GetDefaultAccount(TradingPlatform.BusinessLayer.Account)">
            <summary>
            An symbol has possibility to obtain the default account
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Trade">
            <summary>
            Represents information about trade.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.OrderId">
            <summary>
            Gets the unique identifier of the order initiating the trade.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.PositionId">
            <summary>
            Gets a unique identifier of the position, which is related to this trade.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.Price">
            <summary>
            Get the price where trade was executed
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.Quantity">
            <summary>
            Get the trade quantity
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.DateTime">
            <summary>
            Get the date and time when trade was executed
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.GrossPnl">
            <summary>
            Get the trade Gross P&amp;L
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.NetPnl">
            <summary>
            Get the trade Net P&amp;L
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.Fee">
            <summary>
            Get the fee value that was charged for this trade
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Trade.OrderTypeId">
            <summary>
            Get the trade order type
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Trade.Updated">
            <summary>
            Will be triggered on trade updating
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SymbolsListManager">
            <summary>
            The symbols list manager.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SymbolsListManager.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SymbolsListManager.Settings">
            <summary>
            Gets or Sets the settings.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.DepthOfMarket">
            <summary>
            Represent access to level2 data.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DepthOfMarket.Asks">
            <summary>
            Gets Level2 Asks list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DepthOfMarket.Bids">
            <summary>
            Gets Level2 Bids list
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.DepthOfMarket.GetDepthOfMarketAggregatedCollections(TradingPlatform.BusinessLayer.GetDepthOfMarketParameters)">
            <summary>
            Gets current Level2 data
            </summary>
            <param name="parameters">Parameters of DepthOfMarket</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.DepthOfMarket.GetDepthOfMarketAggregatedCollections(TradingPlatform.BusinessLayer.GetLevel2ItemsParameters)">
            <summary>
            Gets current Level2 data
            </summary>
            <param name="parameters">Parameters of request for Leve2Item collection</param>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.DepthOfMarketAggregatedCollections">
            <summary>
            Leve2 data. Contains Bids and Ask collections
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GetDepthOfMarketParameters">
            <summary>
            Represent parameters of DepthOfMarket
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GetLevel2ItemsParameters">
            <summary>
            Represent parameters of request for Leve2Item collection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GetLevel2ItemsParameters.AggregateMethod">
            <summary>
            Aggregation method
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GetLevel2ItemsParameters.LevelsCount">
            <summary>
            Required amount of level2
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GetLevel2ItemsParameters.CustomTickSize">
            <summary>
            Use custom tick size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GetLevel2ItemsParameters.CalculateCumulative">
            <summary>
            Calculate cumulative size
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AggregateMethod">
            <summary>
            Aggregation method
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Level2Item">
            <summary>
            Represent access to level2 item.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.Cumulative">
            <summary>
            Cumulative size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.ImbalancePercent">
            <summary>
            Imbalance Percent
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.QuoteTime">
            <summary>
            Time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Item.MMID">
            <summary>
            MMID
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.VariableTick.CheckPrice(System.Double)">
            <summary>
            проверка на вхождение
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Connection">
            <summary>
            Represents information about connection and provides an access to the current trading information(Symbols, Orders, Position, Accounts etc.).
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.BusinessObjects">
            <summary>
            Provides access to all business objects which are belong to this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.Id">
            <summary>
            Gets connection Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.Name">
            <summary>
            Gets connection Name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.VendorName">
            <summary>
            Gets connection's vendor name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.Settings">
            <summary>
            Contains list of connection settings. Will be reused on each population time.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.State">
            <summary>
            Gets connection's state (Connected/Connecting/Fail etc.)
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.Type">
            <summary>
            Defines connection type
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Connection.StateChanged">
            <summary>
            Will be triggered when <see cref="P:TradingPlatform.BusinessLayer.Connection.State"/> changed.
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Connection.ConnectingProgressChanged">
            <summary>
            Will be triggered when <see cref="P:TradingPlatform.BusinessLayer.Connection.ConnectingProgress"/> changed.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.PingTime">
            <summary>
            Represents connection ping time
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.MessagesQueueDepth">
            <summary>
            Messages count that one is waited to process
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Connection.HistoryMetaData">
            <summary>
            Gets a matched available metadata info with the vendor's side
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Connection.Connect">
            <summary>
            Establishes a connection to a specified vendor
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Connection.Disconnect">
            <summary>
            Closes a connection.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Connection.GetSymbolInternal(TradingPlatform.BusinessLayer.GetSymbolRequestParameters,TradingPlatform.BusinessLayer.NonFixedListDownload)">
            <summary>
            Только для использования в ConnectionCache
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Connection.SmartSearchByWords(System.String[],TradingPlatform.BusinessLayer.Symbol,System.Func{System.String,System.String})">
            <summary>
            alexb: "Умный" поиск - разрешаем указывать слова в любом порядке
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Connection.GetReport(TradingPlatform.BusinessLayer.ReportRequestParameters)">
            <summary>
            Generates a report with given requested parameters
            </summary>
            <param name="requestParameters">specifies Report's type</param>
            <returns></returns>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Symbols">
            <summary>
            Gets connection's <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.SymbolTypes">
            <summary>
            Gets connection's symbol types list which are allowed in this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Accounts">
            <summary>
            Gets connection's <see cref="T:TradingPlatform.BusinessLayer.Account"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Assets">
            <summary>
            Gets connection's <see cref="T:TradingPlatform.BusinessLayer.Asset"/>s list
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Exchanges">
            <summary>
            Gets all Exchanges which are allowed in this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Orders">
            <summary>
            Gets all Orders which are belong to this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.OrderTypes">
            <summary>
            Gets all Order Types  which are available on this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.Positions">
            <summary>
            Gets all Positions which are belong to this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.ClosedPositions">
            <summary>
            Gets all Closed Positions which are belong to this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.CorporateActions">
            <summary>
            Gets all Corporate actions which are belong to this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.ReportTypes">
            <summary>
            Gets all Report Types which are available on this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.AccountOperations">
            <summary>
            Gets all Account operations which are available on this connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionCache.TradingSignals">
            <summary>
            Gets all Tradins signals which are available on this connection
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ConnectionState">
            <summary>
            Server connection status
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ConnectionType">
            <summary>
            Specifies connection using type.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ConnectionCreationType">
            <summary>
            Specifies how connection was created: by default or by user
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ConnectionInfo">
            <summary>
            Represents all needed parameters for the connection constructing process.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.Name">
            <summary>
            Gets a user friendly name of the connection
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.Group">
            <summary>
            Gets connection group
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.VendorName">
            <summary>
            Gets vendor's name
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.ConnectionId">
            <summary>
            Gets connection Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.IsFavourite">
            <summary>
            Favorites one will be displayed in Control center toolbar
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.ConnectionState">
            <summary>
            Gets ConnectionState
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.VendorSettings">
            <summary>
            Gets vendor's settings
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.CreationType">
            <summary>
            Specifies how connection was created: by default or by user
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ConnectionInfo.Settings">
            <summary>
            <see cref="T:TradingPlatform.BusinessLayer.ICustomizable"/> realization
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ConnectionInfo.#ctor(System.String)">
            <summary>
            Creates connection info instance
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ConnectionInfo.#ctor(System.String,System.String,System.String,TradingPlatform.BusinessLayer.ConnectionCreationType)">
            <summary>
            Creates connection info instance.
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="vendorName"></param>
            <param name="creationType"></param>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ConnectionsManager.PING_PERIOD">
            <summary>
            дефолтовый период пигования
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ConnectionsManager.pingTimer">
            <summary>
            Таймер, по которому проходит пинг
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ConnectionsManager.PingStart">
            <summary>
            Запускаем таймер
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.ConnectionsManager.PingStop">
            <summary>
            Останавливаем таймер
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.ConnectionsManager.problemConnections">
            <summary>
            Коннекты, которые нужно подключить
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ReconnectInfo.ReconnectDelay">
            <summary>
            Сколько ждем до следующей попытки
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Core">
            <summary>
            The main entry point in the API. Core keeps access to all business logic entities and their properties:
            connections, accounts, symbols, positions, orders, etc. Some of them can be reached through using managers or directly via specified collections.
            You can always access the Core object via static Core.Instance property.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Instance">
            <summary>
            Gets a singleton instance of <see cref="T:TradingPlatform.BusinessLayer.Core"/>. API entry point
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Connections">
            <summary>
            Gets an access to all created connections and manages them
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Loggers">
            <summary>
            Gets an access to the system logging mechanism
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Licences">
            <summary>
            Obtains licence rules for the current user
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Vendors">
            <summary>
            Gets an access to all available trading data vendors and creates them
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.HistoryAggregations">
            <summary>
            Gets an access to the all available aggregation types
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.VolumeAnalysis">
            <summary>
            Access to Volume Analysis calculations
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Indicators">
            <summary>
            Gets an access to the all available indicators and creates them
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Strategies">
            <summary>
            Gets an access to the all available trading strategies and manages them
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.RulesManager">
            <summary>
            Gets a <see cref="T:TradingPlatform.BusinessLayer.Rule"/> permissions checking mechanism
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.TimeUtils">
            <summary>
            Gets a time based conversion and synchronization mechanism
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.MailUtils">
            <summary>
            Gets SMTP mail service for sending emails
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.TradingStatus">
            <summary>
            Represents current trading status
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.OnTradingStatusChanged">
            <summary>
            Will be triggered when <see cref="P:TradingPlatform.BusinessLayer.Core.TradingStatus"/> changed
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Symbols">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.SymbolTypes">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.SymbolType"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Accounts">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Account"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Assets">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Asset"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Exchanges">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Exchange"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Orders">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Order"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.OrderTypes">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.OrderType"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Positions">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.Position"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.ClosedPositions">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.ClosedPosition"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.CorporateActions">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.CorporateAction"/>s from open connections
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.ReportTypes">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.ReportType"/>s from open connections. Otherwise returns empty list
            </summary>>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.TradingSignals">
            <summary>
            Gets all available <see cref="T:TradingPlatform.BusinessLayer.TradingSignal"/>s from open connections. Otherwise returns empty list
            </summary>>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.Initialize">
            <summary>
            Starts a <see cref="T:TradingPlatform.BusinessLayer.Core"/> initialization process which initializes given Managers, <see cref="T:TradingPlatform.BusinessLayer.Connection"/> and Utils. And provides a subscribing on events.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.Dispose">
            <summary>
            Disposes all previously initialized modules and unsubscribe from events
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.AccountAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.Account"/> added to the core
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetAccount(TradingPlatform.BusinessLayer.BusinessObjectInfo)">
            <summary>
            Gets an instance of exist Account or creates a new one with given info parameter
            </summary>
            <param name="accountInfo"></param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.SymbolAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> added to the core
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.SearchSymbols(TradingPlatform.BusinessLayer.SearchSymbolsRequestParameters)">
            <summary>
            Returns all <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>s from open connections which satisfy given request parameters, otherwise returns empty list
            </summary>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetSymbol(TradingPlatform.BusinessLayer.GetSymbolRequestParameters,System.String,TradingPlatform.BusinessLayer.NonFixedListDownload)">
            <summary>
            Retrieves any <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> by given request parameters. Otherwise returns null
            </summary>
            <param name="requestParameters"></param>
            <param name="connectionId"> Must be specified if open connections total is more than one. Will search only in Synthetic symbols list if id is equal to <see cref="F:TradingPlatform.BusinessLayer.Synthetic.SYNTHETIC_CONNECTION_ID"/> </param>
            <param name="downloadSymbol"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetSymbol(TradingPlatform.BusinessLayer.BusinessObjectInfo)">
            <summary>
            Gets an instance of exist symbol or creates a new one with given info parameter
            </summary>
            <param name="symbolInfo"></param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.OrderAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.Order"/> placed
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.OrderRemoved">
            <summary>
            Will be triggered when <see cref="T:TradingPlatform.BusinessLayer.Order"/> canceled
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetOrderType(System.String,System.String)">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.OrderType"/> instance by given Id string. Otherwise returns null
            </summary>
            <param name="orderTypeId"></param>
            <param name="connectionId">Must be specified if open connections total is more than one</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetOrderById(System.String,System.String)">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.Order"/> instance by given Id string. Otherwise returns null
            </summary>
            <param name="orderId"></param>
            <param name="connectionId">Must be specified if open connections total is more than one</param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.PositionAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.Position"/> opened
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.PositionRemoved">
            <summary>
            Will be triggered when <see cref="T:TradingPlatform.BusinessLayer.Position"/> closed
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetPositionById(System.String,System.String)">
            <summary>
            Gets <see cref="T:TradingPlatform.BusinessLayer.Position"/> instance by given Id string. Otherwise returns null
            </summary>
            <param name="positionId"></param>
            <param name="connectionId">Must be specified if open connections total is more than one</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.CalculatePnL(TradingPlatform.BusinessLayer.PnLRequestParameters)">
            <summary>
            Gets Profit'n'Loss <see cref="T:TradingPlatform.BusinessLayer.PnL"/> with given request parameters from open connection. Otherwise returns null
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.ClosedPositionAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.ClosedPosition"/> added
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.ClosedPositionRemoved">
            <summary>
            Will be triggered when <see cref="T:TradingPlatform.BusinessLayer.ClosedPosition"/> removed
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.TradeAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.Trade"/> occured
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetTrades(TradingPlatform.BusinessLayer.TradesHistoryRequestParameters,System.String)">
            <summary>
            Gets collection of <see cref="T:TradingPlatform.BusinessLayer.Trade"/> by given parameters
            </summary>
            <param name="parameters"></param>
            <param name="connectionId"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetTrades(TradingPlatform.BusinessLayer.TradesHistoryRequestParameters,TradingPlatform.BusinessLayer.AccountTradesLoadingCallback,System.String)">
            <summary>
            Gets collection of <see cref="T:TradingPlatform.BusinessLayer.Trade"/> by given parameters and callback
            </summary>
            <param name="parameters"></param>
            <param name="callback"></param>
            <param name="connectionId"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.CorporateActionAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.CorporateAction"/> occured
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.OrdersHistoryAdded">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.OrderHistory"/> added
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetOrdersHistory(TradingPlatform.BusinessLayer.OrdersHistoryRequestParameters,System.String)">
            <summary>
            Gets collection of <see cref="T:TradingPlatform.BusinessLayer.OrderHistory"/> by given parameters
            </summary>
            <param name="parameters"></param>
            <param name="connectionId"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.PlaceOrder(TradingPlatform.BusinessLayer.PlaceOrderRequestParameters)">
            <summary>
            Places <see cref="T:TradingPlatform.BusinessLayer.Order"/> with given request parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.PlaceOrders(System.Collections.Generic.ICollection{TradingPlatform.BusinessLayer.PlaceOrderRequestParameters},TradingPlatform.BusinessLayer.GroupOrderType)">
            <summary>
            Places multiple <see cref="T:TradingPlatform.BusinessLayer.Order"/>s with given request parameters
            </summary>
            <param name="requests"></param>
            <param name="groupOrderType"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.ModifyOrder(TradingPlatform.BusinessLayer.ModifyOrderRequestParameters)">
            <summary>
            Modifies <see cref="T:TradingPlatform.BusinessLayer.Order"/> by given request parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.ClosePosition(TradingPlatform.BusinessLayer.ClosePositionRequestParameters)">
            <summary>
            Closes <see cref="T:TradingPlatform.BusinessLayer.Position"/> with given request parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.CancelOrder(TradingPlatform.BusinessLayer.CancelOrderRequestParameters)">
            <summary>
            Cancels <see cref="T:TradingPlatform.BusinessLayer.Order"/> with given request parameters
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.GetReport(TradingPlatform.BusinessLayer.ReportRequestParameters)">
            <summary>
            Returns <see cref="T:TradingPlatform.BusinessLayer.Report"/> with given request parameters from open connection
            </summary>
            <param name="requestParameters"></param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.DealTicketReceived">
            <summary>
            Will be triggered when new <see cref="T:TradingPlatform.BusinessLayer.DealTicket"/> received
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.SendCustomRequest(System.String,TradingPlatform.BusinessLayer.RequestParameters)">
            <summary>
            Sends custom request if connection with given Id is open
            </summary>
            <param name="connectionId"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.SubscribeToCustomMessages(System.Action{TradingPlatform.BusinessLayer.Integration.CustomMessage},System.Int32[])">
            <summary>
            Subscribe on custom messages
            </summary>
            <param name="handler">custom  message handler</param>
            <param name="messagesTypes">custom messages Id</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.UnsubscribeFromCustomMessages(System.Action{TradingPlatform.BusinessLayer.Integration.CustomMessage},System.Int32[])">
            <summary>
            Unsubscribe from custom messages
            </summary>
            <param name="handler">custom  message handler</param>
            <param name="messagesTypes">custom messages Id</param>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.SymbolList">
            <summary>
            Gets all previously configured <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/>s
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.SymbolListManager">
            <summary>
            Gets an access to <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/>s and manages them
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.AddSymbolList(System.String,System.Collections.Generic.IEnumerable{TradingPlatform.BusinessLayer.Symbol})">
            <summary>
            Adds <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/> if given parameters are valid
            </summary>
            <param name="symbolsListName"></param>
            <param name="symbols"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.ReplaceSymbolList(System.String,System.Collections.Generic.IList{TradingPlatform.BusinessLayer.Symbol})">
            <summary>
            Replaces exist list by new list in <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/> if given parameters are valid
            </summary>
            <param name="symbolsListName"></param>
            <param name="symbols"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.RemoveSymbolList(System.String)">
            <summary>
            Removes <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/> with a given name
            </summary>
            <param name="symbolsListName"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.RenameSymbolList(System.String,System.String)">
            <summary>
            Replaces list name by new given name in <see cref="T:TradingPlatform.BusinessLayer.SymbolList"/> if given parameters are valid
            </summary>
            <param name="symbolsListName"></param>
            <param name="newSymbolsListName"></param>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.HistoricalSymbols">
            <summary>
            Represent all available Historical Symbols
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.SyntheticAdded">
            <summary>
            Will be triggered when custom symbol <see cref="T:TradingPlatform.BusinessLayer.Synthetic"/> added
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.SyntheticRemoved">
            <summary>
            Will be triggered when custom symbol <see cref="T:TradingPlatform.BusinessLayer.Synthetic"/> removed
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.SyntheticUpdated">
            <summary>
            Will be triggered when custom symbol <see cref="T:TradingPlatform.BusinessLayer.Synthetic"/> updated
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Core.Synthetics">
            <summary>
            Represent all available Synthetic items
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.AddSynthetic(TradingPlatform.BusinessLayer.Synthetic)">
            <summary>
            Adds given Synthetic to the list <see cref="P:TradingPlatform.BusinessLayer.Core.Synthetics"/> if it does not contain
            </summary>
            <param name="synthetic"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Core.RemoveSynthetic(TradingPlatform.BusinessLayer.Synthetic)">
            <summary>
            Removes given Synthetic from the list <see cref="P:TradingPlatform.BusinessLayer.Core.Synthetics"/> if it exists
            </summary>
            <param name="synthetic"></param>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Core.TradingSignalUpdate">
            <summary>
            Will be triggered when <see cref="T:TradingPlatform.BusinessLayer.TradingSignal"/> created/chenged/removed
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryAggregation.ToString">
            <summary>
            Override to change string representation of aggregation
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HistoricalData">
            <summary>
            Represent access to historical data information and indicators control.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.Symbol">
            <summary>
            Gets HistoricalData symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.Aggregation">
            <summary>
            Gets HistoricalData aggregation
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.FromTime">
            <summary>
            Gets HistoricalData left time boundary
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.ToTime">
            <summary>
            Gets HistoricalData right time boundary
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.Count">
            <summary>
            Gets HistoricalData items amount
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.Item(System.Int32,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Retrieves HistoricalData item by indexing offset and direction to find.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.HistoricalData.NewHistoryItem">
            <summary>
            Will be triggered when new historical item created
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.HistoricalData.HistoryItemUpdated">
            <summary>
            Will be triggered when current historical item changed or updated
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.BuiltInIndicators">
            <summary>
            Gets access to built-in indicators
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalData.Reload">
            <summary>
            Reloads entire HistoricalData
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalData.GetIndexByTime(System.Int64,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Gets index by time with counting on search direction
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoricalData.AttachedIndicators">
            <summary>
            Gets array of attached indicators
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalData.AddIndicator(System.String,TradingPlatform.BusinessLayer.SettingItem[])">
            <summary>
            Creates indicator by it's name and if it successfully created adds it to the HistoricalData
            </summary>
            <param name="indicatorName"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalData.AddIndicator(TradingPlatform.BusinessLayer.Indicator)">
            <summary>
            Adds indicator to the HistoricalData
            </summary>
            <param name="indicator"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalData.RemoveIndicator(TradingPlatform.BusinessLayer.Indicator)">
            <summary>
            Removes indicator from the HistoricalData
            </summary>
            <param name="indicator"></param>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.HistoricalData.HistoryItemVolumeAnalysisUpdated">
            <summary>
            Will be triggered when volume analysis of current historical item changed or updated
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.BasePeriod">
            <summary>
            Period that can be used as a basis for history aggregations
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HistoryItemBar">
            <summary>
            Represents historical data bar item
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.TimeRight">
            <summary>
            Gets bar's right time border
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.TicksRight">
            <summary>
            Defines bar's ticks count
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Open">
            <summary>
            Defines Open price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.High">
            <summary>
            Defines High price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Low">
            <summary>
            Defines Low price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Close">
            <summary>
            Defines Close price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Median">
            <summary>
            Gets Median (High+Low)/2 price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Typical">
            <summary>
            Gets Typical (High+Low+Close)/3  price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Weighted">
            <summary>
            Gets Weighted (High+Low+Close+Close)/4  price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Ticks">
            <summary>
            Defines ticks amount
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Volume">
            <summary>
            Defines volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemBar.Item(TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets price by indexing <see cref="T:TradingPlatform.BusinessLayer.PriceType"/>
            </summary>
            <param name="priceType"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemBar.#ctor">
            <summary>
            Creates HistoryItemBar instance with default OHLC price = <see cref="F:TradingPlatform.BusinessLayer.Utils.Const.DOUBLE_UNDEFINED"/>
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemBar.Equals(System.Object)">
            <summary>
            Comparing by <see cref="P:TradingPlatform.BusinessLayer.HistoryItem.TicksLeft"/>, OHLC, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemBar.Volume"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemDom.#ctor">
            <summary>
            Creates HistoryItemLast instance
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HistoryItemLast">
            <summary>
            Represents historical data trade item
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemLast.Price">
            <summary>
            Defines price value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemLast.Volume">
            <summary>
            Defines volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemLast.AggressorFlag">
            <summary>
            Defines trade operation side as aggressor flag
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemLast.Item(TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets price by indexing <see cref="T:TradingPlatform.BusinessLayer.PriceType"/>
            </summary>
            <param name="priceType"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemLast.#ctor">
            <summary>
            Creates HistoryItemLast instance
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemLast.Equals(System.Object)">
            <summary>
            Comparing by <see cref="P:TradingPlatform.BusinessLayer.HistoryItem.TicksLeft"/>, OHLC, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemLast.Volume"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemLevel2.#ctor">
            <summary>
            Creates HistoryItemLast instance
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemMark.Item(TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets price by indexing <see cref="T:TradingPlatform.BusinessLayer.PriceType"/>
            </summary>
            <param name="priceType"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemMark.#ctor">
            <summary>
            Creates HistoryItemLast instance
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HistoryItemTick">
            <summary>
            Represents historical data tick item
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemTick.Bid">
            <summary>
            Defines Bid price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemTick.BidSize">
            <summary>
            Defines Bid size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemTick.Ask">
            <summary>
            Defines Ask price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemTick.AskSize">
            <summary>
            Defines Ask size    
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.HistoryItemTick.Item(TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets price by indexing <see cref="T:TradingPlatform.BusinessLayer.PriceType"/>
            </summary>
            <param name="priceType"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemTick.#ctor">
            <summary>
            Creates HistoryItemBar instance with default Ask/AskSize/Bid/BidSize = <see cref="F:TradingPlatform.BusinessLayer.Utils.Const.DOUBLE_UNDEFINED"/>
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoryItemTick.Equals(System.Object)">
            <summary>
            Comparing by <see cref="P:TradingPlatform.BusinessLayer.HistoryItem.TicksLeft"/>, OHLC, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemTick.Ask"/>, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemTick.AskSize"/>, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemTick.Bid"/>, <see cref="P:TradingPlatform.BusinessLayer.HistoryItemTick.BidSize"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HistoryRequestParameters">
            <summary>
            Resolves a history request parameters per symbol
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Period">
            <summary>
            Represents mechanism for supporting predefined and custom periods
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier">
            <summary>
            Gets period multiplier
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.BasePeriod">
            <summary>
            Gets base period type
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.Ticks">
            <summary>
            Gets ticks value as an result of base period <see cref="M:TradingPlatform.BusinessLayer.Period.TicksInBasePeriod(TradingPlatform.BusinessLayer.BasePeriod)"/> multiplicated by <see cref="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier"/>
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.#ctor(TradingPlatform.BusinessLayer.BasePeriod,System.Int32)">
            <summary>
            Creates Period instance with <see cref="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier"/> greater than 0
            </summary>
            <param name="basePeriod"></param>
            <param name="periodMultiplier"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_Equality(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if their base paeriods and <see cref="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier"/> are respectively equal.
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_Inequality(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if any of their base paeriods and <see cref="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier"/> are respectively not equal.
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_LessThan(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if their ticks values are satisfying initial condition
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_GreaterThan(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if their ticks values are satisfying initial condition
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_LessThanOrEqual(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if their ticks values are satisfying initial condition
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.op_GreaterThanOrEqual(TradingPlatform.BusinessLayer.Period,TradingPlatform.BusinessLayer.Period)">
            <summary>
            True if their ticks values are satisfying initial condition
            </summary>
            <param name="period1"></param>
            <param name="period2"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.Equals(System.Object)">
            <summary>
            True if their base paeriods and <see cref="P:TradingPlatform.BusinessLayer.Period.PeriodMultiplier"/> are respectively equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.Format(System.DateTime)">
            <summary>
            Formats given value to a specific user friendly string
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.TicksInBasePeriod(TradingPlatform.BusinessLayer.BasePeriod)">
            <summary>
            Returns value in ticks according to base period type
            </summary>
            <param name="basePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.BasePeriodToShortString(TradingPlatform.BusinessLayer.BasePeriod)">
            <summary>
            Returns shorted string according to base period type
            </summary>
            <param name="basePeriod"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.ToDatesRange(System.DateTime@,System.DateTime@)">
            <summary>
            Converts time gap into dates range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.CompareTo(System.Object)">
            <summary>
            Compares by <see cref="P:TradingPlatform.BusinessLayer.Period.Ticks"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.ToXElement">
            <summary>
            Serialize into <see cref="T:System.Xml.Linq.XElement"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Period.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)">
            <summary>
            Deserialize from <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="element"></param>
            <param name="deserializationInfo"></param>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.TICK1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.SECOND1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.SECOND5">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.SECOND10">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.SECOND15">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.SECOND30">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN2">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN3">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN4">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN5">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN10">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN15">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MIN30">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR2">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR3">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR4">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR6">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR8">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.HOUR12">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.DAY1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.WEEK1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.MONTH1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Period.YEAR1">
            <summary>
            Predefined period
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.DayBar">
            <summary>
            Represent access to DayBar quote, which contains summary information about instrument prices.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.High">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Open">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Low">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.PreviousClose">
            <summary>
            Previous Close price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Ticks">
            <summary>
            Ticks value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Volume">
            <summary>
            Volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.QuoteAssetVolume">
            <summary>
            Volume value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.PrevSettlementPrice">
            <summary>
            Previous settlement price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Bid">
            <summary>
            Bid price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.BidSize">
            <summary>
            Bid size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Ask">
            <summary>
            Ask price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.AskSize">
            <summary>
            Ask size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Last">
            <summary>
            Last price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.LastSize">
            <summary>
            Last size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Trades">
            <summary>
            Trades value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.Change">
            <summary>
            Change value
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.ChangePercentage">
            <summary>
            Change value in percentage
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DayBar.OpenInterest">
             <summary>
            
             </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.DOMQuote">
            <summary>
            Represent access to DOM2 quote, which contains Bids and Asks. 
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DOMQuote.Asks">
            <summary>
            Collection of Asks quotes
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.DOMQuote.Bids">
            <summary>
            Collection of Bids quotes
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Last">
            <summary>
            Represent access to trade information.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Last.Price">
            <summary>
            Price at which trade occured
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Last.Size">
            <summary>
            Size of the trade
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Last.AggressorFlag">
            <summary>
            Information about operation side of the trade
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Last.TickDirection">
            <summary>
            Shows the direction of price movement, comparing to previous value.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Level2Quote">
            <summary>
            Represent access to Level2 quote. 
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.PriceType">
            <summary>
            Price type of Level2 quote: Bid or Ask
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.Price">
            <summary>
            Price of Level2 quote
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.Size">
            <summary>
            Size of Level2 quote
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.Id">
            <summary>
            Unique ID of Level2 quote
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.Closed">
            <summary>
            Shows, whether Level2 quote is using only for removing from depth
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.Broker">
            <summary>
            Broker identifier that send level2 quote
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Level2Quote.ImpliedSize">
            <summary>
            specifies the implied quantity associated with the price for the quote. Subtracting this amount from the Size yields the outright quantity for the price level. A value of zero indicates that the implied size is not available/defined or that it is actually zero.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.MessageQuote.Time">
            <summary>
            Time of the quote
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Quote">
            <summary>
            Represent access to quote information.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.Bid">
            <summary>
            Bid price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.BidSize">
            <summary>
            Bid size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.Ask">
            <summary>
            Ask price
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.AskSize">
            <summary>
            Ask size
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.BidTickDirection">
            <summary>
            Shows the direction of bid price movement, comparing to previous value.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Quote.AskTickDirection">
            <summary>
            Shows the direction of ask price movement, comparing to previous value.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Licence.CoreLicenceKeys">
            <summary>
            Constants for licence keys
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Licence.LicencesManager">
            <summary>
            User licences info store
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Licence.LicencesManager.State">
            <summary>
            Current state of connection to licence server
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Licence.LicencesManager.CurrentUser">
            <summary>
            Current connected user info
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Licence.LicencesManager.AllLicenceItems">
            <summary>
            All active licences that user have
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Licence.LicencesManager.GetLicenceRuleItem(System.String)">
            <summary>
            Check that user have licence
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Licence.LoopbackHttpListenerWithoutKestrel">
            <summary>
            The loopback http listener without kestrel.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Licence.LoopbackHttpListenerWithoutKestrel.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Licence.LoopbackHttpListenerWithoutKestrel"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Licence.LoopbackHttpListenerWithoutKestrel.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Licence.LoopbackHttpListenerWithoutKestrel.WaitForCallbackAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for callback asynchronously.
            </summary>
            <param name="token">The token.</param>
            <returns><![CDATA[Task<string>]]></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.UpdateReason">
            <summary>
            Specifies the reason of price data updating.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.UpdateReason.HistoricalBar">
            <summary>
            Indicates the processing of new historical bar.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.UpdateReason.NewTick">
            <summary>
            Indicates the coming of new real-time tick.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.UpdateReason.NewBar">
            <summary>
            Indicates a start of new real-time bar.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.IndicatorUpdateType">
            <summary>
            Specifies the type of events when indicator should recalculate itself.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.LineStyle">
            <summary>
            Specifies the style of indicator line.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.MaMode">
            <summary>
            Moving average mode
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.MaMode.SMA">
            <summary>
            Simple Moving Average
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.MaMode.EMA">
            <summary>
            Exponential Moving Average
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.MaMode.SMMA">
            <summary>
            Smoothed Moving Average
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.MaMode.LWMA">
            <summary>
            Linearly Weighted Moving Average
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.HVSheduleMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.HVSheduleMode.HV">
            <summary>
            Displays HV schedule and percentile value.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.HVSheduleMode.Percentile">
            <summary>
            Displays the percentile schedule only.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.EMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Exponential Moving Average (EMA) indicator.
            <para>EMA provides a weighted price calculation for the last N periods.</para>
            </summary>
            <param name="maPeriod">Period of Exponential Moving Average</param>
            <param name="priceType">Sources prices for MA</param>
             <param name="calculationType">Calculation type</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.LWMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets the Linearly Weighted Moving Average
            <para> Linear Weighted Moving Average makes the most recent bar more important unlike SMA.</para>
            </summary>
            <param name="maPeriod">Moving average period</param>
            <param name="priceType">Type of the price</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.SMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
             Gets the SMA(Simple Moving Average) indicator.
             <para> The 'SMA' indicator provides an average price for the last N periods. </para>
            </summary>
            <param name="period">Period of simple moving average.</param>
            <param name="priceType">Sources prices for MA.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.SMMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Smoothed Moving Average (SMMA) indicator.
            <para>SMMA indicator provides a smoothed average price for the last N periods.</para>
            </summary>
            <param name="period">Moving average period</param>
            <param name="priceType">Type of the price</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.PPMA(System.Int32)">
            <summary>
            Gets the PPMA(Pivot Point Moving Average) indicator.
            <para> The 'PPMA' indicator uses the pivot point calculation as the input a simple moving average.</para>
            </summary>
            <param name="period">Period of PPMA indicator</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MAS3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             Gets the MAS3 (3MASignal) indicator.
            <para>The 'MAS3' indicator offers buy and sell signals according to intersections of three moving averages.</para>
            </summary>
            <param name="shortPeriod">Short moving average period.</param>
            <param name="middlePeriod">Middle moving average period.</param>
            <param name="longPeriod">Long moving average period.</param>
            <param name="barsInterval">The count of bars. The trend will be determined on this interval.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
             <summary>
             Gets the specific MA indicator, according to selected 'MaMode'.
             </summary>
             <param name="period">Period of moving average.</param>
             <param name="priceType">Type of price.</param>
             <param name="maMode">MA mode.</param>
             <param name="calculationType">Calculation type</param>
             <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.BB(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the BB(Bollinger Bands) indicator.
            <para>The 'BB' indicator provides a relative definition of high and low based on standard deviation and a simple moving average.</para>
            </summary>
            <param name="period">Period of MA for envelopes.</param>
            <param name="coefficient">Value of confidence interval.</param>
            <param name="priceType">Sources prices for MA.</param>
            <param name="maMode">Type of moving average.</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.CCI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the Commodity Channel Index.
            <para>Measures the position of price in relation to its moving average.</para>
            </summary>
            <param name="maPeriod">Period for CCI MA</param>
            <param name="priceType">Sources prices for CCI</param>
            <param name="maMode">MA mode for CCI</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MMA(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Returns an instance of the Modified Moving Average (MMA) indicator.
            <para>MMA comprises a sloping factor to help it overtake with the growing or declining value of the trading price of the currency.</para>
            </summary>
            <param name="maPeriod">Period of Modified Moving Average</param>
            <param name="priceType">Sources prices for MA</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Regression(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets the Regression indicator
            <para>The Linear Regression Indicator plots the ending value of a Linear Regression Line for a specified number of bars; showing, statistically, where the price is expected to be.</para>
            </summary>
            <param name="period">Moving average period</param>
            <param name="priceType">Type of the price</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Channel(System.Int32)">
             <summary>
             Gets the Channel (Price Channel) indicator.
             <para>The 'Channel' indicator is based on measurement of min and max prices for the definite number of periods.</para>
             </summary>
             <param name="period">Period of price channel</param>
             <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.AFIRMA(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.AfirmaMode,System.Boolean)">
            <summary>
            Gets the AFIRMA indicator
            <para> Autoregressive finite impulse response moving average. A digital filter accurately shows the price movement as powered with least square method to minimise time lag</para>
            </summary>
            <param name="period">Moving average period</param>
            <param name="priceType">Type of the price</param>
            <param name="afirmaMode">Afirma mode</param>
            <param name="least_squares_method">with least squares method overlapping if true</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.RSI(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.RSIMode,TradingPlatform.BusinessLayer.MaMode,System.Int32,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
             <summary>
             Gets the RSI indicator.
             <para> Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.</para>
             </summary>
             <param name="period">RSI Period</param>
             <param name="priceType">Price Type</param>
             <param name="rsiMode">RSI Mode (Simple or Exponential)</param>
             <param name="maMode">MA Mode for smooth data</param>
             <param name="maperiod">MA period for smooth data</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MD(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the McGinley Dynamic indicator.
            <para>McGinley Dynamic avoids of most whipsaws and it rapidly moves up or down according to a quickly changing market. It needs no adjusting because it is dynamic and it adjusts itself.</para>
            </summary>
            <param name="period">Period of exponential moving average</param>
            <param name="trackingFactor">Dynamic tracking factor</param>
            <param name="priceType">Source price type</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MAE(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,System.Double,System.Double,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the MAE (Moving Average Envelope) indicator.
            <para> The 'MAE' indicator demonstrates a range of the prices discrepancy from a Moving Average.</para>
            </summary>
            <param name="period">Period of MA for envelopes.</param>
            <param name="priceType">Sources prices for MA.</param>
            <param name="maMode">Type of moving average.</param>
            <param name="upShift">Upband deviation in %.</param>
            <param name="downShift">Downband deviation in %.</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.SAR(System.Double,System.Double)">
            <summary>
            Returns an instance of the Parabolic Time/Price System (SAR) indicator.
            <para>SAR indicator helps to define the direction of the prevailing trend and the moment to close positions opened during the reversal.</para>
            </summary>
            <param name="step">Step of parabolic SAR system</param>
            <param name="maximum">Maximum value for the acceleration factor</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.AO">
            <summary>
            Gets the AO (Awesome Oscillator) indicator.
            <para> The 'AO' indicator determines market momentum.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.CMO(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets the CMO (Chande Momentum Oscillator) indicator.
            <para>The CMO calculates the dividing of difference between the sum of all recent gains and the sum of all recent losses by the sum of all price movement over the period.</para>
            </summary>
            <param name="period">Period of MA for envelopes.</param>
            <param name="priceType">Sources prices for MA.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.ZZ(System.Double)">
            <summary>
            Returns an instance of the ZigZag indicator.
            <para>ZigZag is a trend following indicator that is used to predict when a given symbol's momentum is reversing.</para>
            </summary>
            <param name="deviation">Percent Deviation</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.AROON(System.Int32)">
             <summary>
             Gets the Aroon indicator.
             <para>Reveals the beginning of a new trend and determines how strong it is</para>
             </summary>
             <param name="period">Aroons period</param>
             <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.SD(System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Standart Deviation (SD) indicator.
            <para>The SD shows the difference of the volatility value from the average one.</para>
            </summary>
            <param name="period">Period of indicator</param>
            <param name="priceType">Sources prices for MA</param>
            <param name="mode">Type of Moving Average</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MACD(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
             Gets the MACD (Moving Average Convergence/Divergence) indicator.
             <para> The MACD is a trend-following momentum indicator that shows the relationship between two moving averages of prices.</para>
            </summary>
            <param name="fastEMA">Period of fast EMA.</param>
            <param name="slowEMA">Period of slow EMA.</param>
            <param name="signalEMA">Period of signal EMA.</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.KRI(System.Int32)">
            <summary>
            Returns an instance of the Kairi Relative Index (KRI) indicator.
            <para>KRI calculates deviation of the current price from its simple moving average as a percent of the moving average.</para>
            </summary>
            <param name="period"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.BBF(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Bollinger Bands Flat (BBF) indicator.
            <para>The BBF provides the same data as BB, but drawn in separate field and easier to recognize whether price is in or out of the band.</para>
            </summary>
            <param name="period">Period</param>
            <param name="deviation">Deviation</param>
            <param name="priceType">Sources prices for MA</param>
            <param name="mode">Type of Moving Average</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.ROC(System.Int32)">
            <summary>
             Gets the ROC (Rate of Change) indicator.
             <para>The ROC shows the speed at which price is changing.</para>
            </summary>
            <param name="period">Period of momentum.</param>
            <returns></returns>
             <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Momentum(System.Int32,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Gets the Momentum indicator.
            <para>Momentum compares where the current price is in relation to where the price was in the past.</para>
            </summary>
            <param name="period">Period for Momentum</param>
            <param name="priceType">Sources prices for Momentum</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.RLW(System.Int32)">
            <summary>
            Gets the %R Larry Williams.
            <para>Uses Stochastic to determine overbought and oversold levels.</para>
            </summary>
            <param name="period">Period for Momentum</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.PO(System.Int32,System.Int32,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Price Oscillator (PO) indicator.
            <para>PO calculates the variation between price moving averages.</para>
            </summary>
            <param name="period1">Period of MA1</param>
            <param name="period2">Period of MA2</param>
            <param name="priceType">Sources prices for MA</param>
            <param name="mode">Type of Moving Average</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.OsMA(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
             Gets the OsMA (Moving Average of Oscillator) indicator.
             <para> The OsMA reflects the difference between an oscillator (MACD) and its moving average (signal line).</para>
            </summary>
            <param name="fastEMA">Period of fast EMA.</param>
            <param name="slowEMA">Period of slow EMA.</param>
            <param name="signalEMA">Period of signal EMA.</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.OBV(TradingPlatform.BusinessLayer.PriceType)">
             <summary>
             Gets On Balance Volume.
             <para>On Balance Volume (OBV) measures buying and selling pressure as a cumulative indicator that adds volume on up days and subtracts volume on down days.</para>
             </summary>
            <param name="priceType">Sources prices for OBV</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.PVI(TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Returns an instance of the Positive Volume Index (PVI) indicator.
            <para>The PVI value changes on the periods in which value of volume has increased in comparison with the previous period.</para>
            </summary>
            <param name="priceType"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Volume">
            <summary>
            Returns an instance of the Volume indicator.
            <para>Volume allows to confirm the strength of a trend or to suggest about it's weakness.</para>
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.MFI(System.Int32)">
            <summary>
             Gets the MFI(Money Flow Index) indicator.
             <para>The MFI(Money Flow Index) is an oscillator that uses both price and volume to measure buying and selling pressure.</para>
            </summary>
            <param name="period">Period of MFI.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.AC">
            <summary>
            Returns an instance of the Acceleration/Deceleration Oscillator (AC).
            <para>AC measures the acceleration and deceleration of the current momentum.</para>
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.ATR(System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the Average True Range (ATR) indicator.
            <para>The ATR measures of market volatility.</para>
            </summary>
            <returns></returns>
            <param name="period">Period of Moving Average.</param>
            <param name="mode">Type of Moving Average</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.KAMA(System.Int32,System.Double,System.Double,TradingPlatform.BusinessLayer.PriceType)">
            <summary>
            Returns an instance of the Kaufman Adaptive Moving Average (KAMA) indicator.
            <para>KAMA is an exponential style average with a smoothing that varies according to recent data.</para>
            </summary>
            <param name="period">Period</param>
            <param name="fast">Fast factor</param>
            <param name="slow">Slow factor</param>
            <param name="priceType">Sources prices for MA</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Qstick(System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Qstick indicator.
            <para>The Qstick is a moving average that shows the difference between the prices at which an issue opens and closes.</para>
            </summary>
            <param name="period"></param>
            <param name="mode"></param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.SI(System.Double)">
            <summary>
            Get the Swing Index (SI) indicator.
            <para> The SI is used to confirm trend line breakouts on price charts.</para>
            </summary>
            <param name="divider">The divider.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.TSI(System.Int32,System.Int32,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Get the True Strength Index (TSI) indicator.
            <para>
            The TSI is a variation of the Relative Strength Indicator which uses a doubly-smoothed
            EMA of price momentum to eliminate choppy price changes and spot trend changes.
             </para>
            </summary>
            <param name="firstPeriod">First MA period.</param>
            <param name="secondPeriod">Second MA period.</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.ADX(System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Average Directional Index (ADX) indicator.
            <para>The ADX determines the strength of a prevailing trend.</para>
            </summary>
            <param name="period">Period</param>
            <param name="mode">Type of Moving Average</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Keltner(System.Int32,System.Double,TradingPlatform.BusinessLayer.PriceType,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Keltner Channel indicator.
            <para>Keltner Channels are volatility-based envelopes set above and below an exponential moving average.</para>
            </summary>
            <param name="period">Period of MA for Keltner's Channel</param>
            <param name="offset">Coefficient of channel's width</param>
            <param name="priceType">Sources prices for MA</param>
            <param name="mode">Type of Moving Average</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.PPO(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Returns an instance of the Percentage Price Oscillator (PPO).
            <para>Percentage Price Oscillator is a momentum indicator. Signal line is EMA of PPO. Formula: (FastEMA-SlowEMA)/SlowEMA.</para>
            </summary>
            <param name="fastPeriod">Fast EMA Period</param>
            <param name="slowPeriod">Slow EMA Period</param>
            <param name="signalPeriod">Signal EMA Period</param>
             <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Stochastic(System.Int32,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the Stochastic Slow.
            <para>Shows the location of the current close relative to the high/low range over a set number of periods (Slow).</para>
            </summary>
            <param name="period">Period</param>
            <param name="smooth">Smoothing</param>
            <param name="doubleSmooth">Double smoothing</param>
            <param name="MaType">Moving type</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.StochasticxRSI(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Stochastic x Relative Strength Index.
            <para>StochRSI is an oscillator that measures the level of RSI relative to its range.</para>
            </summary>
            <param name="rsiPeriod">Period</param>
            <param name="kPeriod">Smoothing</param>
            <param name="dPeriod">Double smoothing</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.ICH(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Ichimoku.
            <para>Enables to quickly discern and filter 'at a glance' the low-probability trading setups from those of higher probability.</para>
            </summary>
            <param name="TenkanPeriod">Tenkan Period</param>
            <param name="KijunPeriod">Kijun Period</param>
            <param name="SenkouSpanB">Senkou Span B</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.DMI(System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.IndicatorCalculationType)">
            <summary>
            Gets the Directional Movement Index(DMI) indicator.
            <para>The DMI іdentifies whether there is a definable trend in the market.</para>
            </summary>
            <param name="period">Period of Moving Average.</param>
            <param name="mode">Type of Moving Average.</param>
            <param name="calculationType">Calculation type</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.BuiltInIndicators.Alligator(TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32,TradingPlatform.BusinessLayer.MaMode,TradingPlatform.BusinessLayer.PriceType,System.Int32,System.Int32)">
            <summary>
            Gets the Alligator.
            <para>Three moving averages with different colors, periods and calculation methods.</para>
            </summary>
            <param name="JawMAType">Type of Jaw Moving Average.</param>
            <param name="JawSourcePrice">SourcePrice of Jaw Moving Average.</param>
            <param name="JawMAPeiod">Period of Jaw Moving Average.</param>
            <param name="JawMAShift">Shift of Jaw Moving Average.</param>
            <param name="TeethMAType">Period of Moving Average.</param>
            <param name="TeethSourcePrice">Type of Moving Average.</param>
            <param name="TeethMAPeiod">Period of Moving Average.</param>
            <param name="TeethMAShift">Type of Moving Average.</param>
            <param name="LipsMAType">Period of Moving Average.</param>
            <param name="LipsSourcePrice">Type of Moving Average.</param>
            <param name="LipsMAPeiod">Period of Moving Average.</param>
            <param name="LipsMAShift">Type of Moving Average.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Indicator">
            <summary>
            Base class for all indicators.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.ShortName">
            <summary>
            Short name of indicator
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.Symbol">
            <summary>
            Access to current Symbol of indicator
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.Count">
            <summary>
            Amount of items in internal buffers
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.HistoricalData">
            <summary>
            Represent access to current used historical data.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.LinesSeries">
            <summary>
            Represent access indicator series
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.LinesLevels">
             <summary>
            
             </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.SeparateWindow">
            <summary>
            Specified, whether indicator should use main or additional window on the chart
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.OnBackGround">
            <summary>
            Specified, whether indicator should draw on chart background by default.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.AllowFitAuto">
            <summary>
            Specified, whether indicator should participate into price auto scale system.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.Digits">
            <summary>
            Precision amount for formatting price (the count of digits after decimal point); By default = -1, which means to use precision from indicator's symbol
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.Settings">
            <summary>
            Indicator's settings
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Indicator.CurrentChart">
            <summary>
            Represent access to the chart, that created indicator
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Refresh">
            <summary>
            Recalculate indicator
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.AddIndicator(TradingPlatform.BusinessLayer.Indicator)">
             <summary>
            
             </summary>
             <param name="indicator"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.SetValue(System.Double,System.Int32,System.Int32)">
            <summary>
            Sets the value of indicator into internal buffer
            </summary>
            <param name="value">Value</param>
            <param name="lineIndex">Index of indicator line</param>
            <param name="offset">Offset value</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.GetValue(System.Int32,System.Int32,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Gets the value of indicator from internal buffer
            </summary>
            <param name="offset">Offset value</param>
            <param name="lineIndex">Index of indicator line</param>
            <param name="origin">Offset start point</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.SetLineBreak(System.Int32,System.Int32,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Set line break point.
            </summary>
            <param name="offset">Offset value</param>
            <param name="lineIndex">Index of indicator line</param>
            <param name="origin">Offset start point</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.RemoveLineBreak(System.Int32,System.Int32,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Remove line break point.
            </summary>
            <param name="offset">Offset value</param>
            <param name="lineIndex">Index of indicator line</param>
            <param name="origin">Offset start point</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.GetLineBreak(System.Int32,System.Int32,TradingPlatform.BusinessLayer.SeekOriginHistory)">
            <summary>
            Check if the point is a break point.
            </summary>
            <param name="offset">Offset value</param>
            <param name="lineIndex">Index of indicator line</param>
            <param name="origin">Offset start point</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.GetPrice(TradingPlatform.BusinessLayer.PriceType,System.Int32)">
            <summary>
            Gets the price from historical data
            </summary>
            <param name="priceType"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Bid(System.Int32)">
            <summary>
            Get Bid price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Ask(System.Int32)">
            <summary>
            Get Ask price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Last(System.Int32)">
            <summary>
            Get Last price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Open(System.Int32)">
            <summary>
            Get Open price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.High(System.Int32)">
            <summary>
            Get High price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Low(System.Int32)">
            <summary>
            Get Low price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Close(System.Int32)">
            <summary>
            Get Close price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Median(System.Int32)">
            <summary>
            Get Median price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Typical(System.Int32)">
            <summary>
            Get Typical price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Weighted(System.Int32)">
            <summary>
            Get Weighted price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Volume(System.Int32)">
            <summary>
            Get Volume
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.QuoteAssetVolume(System.Int32)">
            <summary>
            Get Volume in quoting asset
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Ticks(System.Int32)">
            <summary>
            Get Ticks
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.OpenInterest(System.Int32)">
            <summary>
            Get Open interest
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.FundingRate(System.Int32)">
            <summary>
            Get Funding rate
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.Time(System.Int32)">
            <summary>
            Get Time
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.FormatPrice(System.Double)">
            <summary>
            Formatting price, using precision from assigned symbol or Digits value if specified
            </summary>
            <param name="price">Price value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.BeginCloud(System.Int32,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            Marks cloud begin between two line series with specific color
            </summary>
            <param name="line1Index">First line series index</param>
            <param name="line2Index">Second line series index</param>
            <param name="color">Cloud color</param>
            <param name="offset">Offset</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Indicator.EndCloud(System.Int32,System.Int32,System.Drawing.Color,System.Int32)">
            <summary>
            Marks cloud end between two line series with specific color
            </summary>
            <param name="line1Index">First line series index</param>
            <param name="line2Index">Second line series index</param>
            <param name="color">Cloud color</param>
            <param name="offset">Offset</param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.IndicatorLineMarker">
            <summary>
            Using IndicatorLineMarker class you can mark by color or icon any point of your indicator's line.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IndicatorLineMarker.Color">
            <summary>
            Color of the marker
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IndicatorLineMarker.UpperIcon">
            <summary>
            Icon that will be drawn above the indicator line
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.IndicatorLineMarker.BottomIcon">
            <summary>
            Icon that will be drawn beyond the indicator line
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IndicatorLineMarker.#ctor(System.Drawing.Color,TradingPlatform.BusinessLayer.IndicatorLineMarkerIconType,TradingPlatform.BusinessLayer.IndicatorLineMarkerIconType)">
            <summary>
            Constructor for IndicatorLineMarker
            </summary>
            <param name="color"></param>
            <param name="upperIcon"></param>
            <param name="bottomIcon"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IndicatorLineMarker.#ctor">
            <summary>
            Constructor for IndicatorLineMarker
            </summary>       
        </member>
        <member name="T:TradingPlatform.BusinessLayer.IndicatorLineMarkerIconType">
            <summary>
            Different type of icons for Indicator marker
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.LineSeries.DrawBegin">
            <summary>
            Sets the bar number (from the data beginning) from which the drawing of the given indicator line must start;
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.LineSeries.TimeShift">
            <summary>
            Time shift of indicator's line
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LineSeries.SetMarker(System.Int32,System.Drawing.Color)">
            <summary>
            Redraws parts of indicator's line within the interval set by offset
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LineSeries.RemoveMarker(System.Int32)">
            <summary>
            Removes redrawn parts of indicator's line within the interval set by offset
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LineSeries.GetMarker(System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LineSeries.ClearMarkers">
            <summary>
            Fully clears markers from line
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.InputParameterAttribute">
            <summary>
            Use this attribute to mark input parameters of your script. You will see them in the settings screen on adding
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.Name">
            <summary>
            Displayed name of input parameter
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.SortIndex">
            <summary>
            Sort index for input paramter
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.Minimum">
            <summary>
            Minimal value for numeric input parameters
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.Maximum">
            <summary>
            Maximal value for numeric input parameters
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.Increment">
            <summary>
            Increment value for numeric input parameters
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.DecimalPlaces">
            <summary>
            Decimal palces for numeric input parameters
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.InputParameterAttribute.Variants">
            <summary>
            List of predefined values
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Modules.OrderPlacingStrategy.NewLog">
            <summary>
            Event occurred when write a new log
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Modules.OrderPlacingStrategy.GetLogs(System.DateTime,System.DateTime)">
            <summary>
            Get logs from the strategy for specified date range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Modules.OrderPlacingStrategy.Log(System.String,TradingPlatform.BusinessLayer.StrategyLoggingLevel)">
            <summary>
            Write log message
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Strategy">
            <summary>
            The base class for strategies
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Strategy.Id">
            <summary>
            Unique ID of the strategy
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Strategy.State">
            <summary>
            The current state of the strategy
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Strategy.NewLog">
            <summary>
            Event occured when strategy write a new log
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.Strategy.SettingsChanged">
            <summary>
            Event occured if any of strategy settings was changed
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.Run">
            <summary>
            Run strategy
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.Stop">
            <summary>
            Stop strategy
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.Remove">
            <summary>
            Remove the strategy
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.GetMetrics">
            <summary>
            Get current metrics from the strategy
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.GetLogs(System.DateTime,System.DateTime)">
            <summary>
            Get logs from the strategy for specified date range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Strategy.Log(System.String,TradingPlatform.BusinessLayer.StrategyLoggingLevel)">
            <summary>
            Write log message
            </summary>
            <param name="message"></param>
            <param name="level"></param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Native.NativeMouseButtons">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.Left">
            <summary>
            The left mouse button was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.Right">
            <summary>
            The right mouse button was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.Middle">
            <summary>
            The middle mouse button was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.XButton1">
            <summary>
            The first XButton was pressed.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Native.NativeMouseButtons.XButton2">
            <summary>
            The second XButton was pressed.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Native.NativeMouseEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled.
            true to bypass the control's default handling; otherwise, false to also pass the event along to the default control handler.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SubscribeQuotesParameters">
            <summary>
            Defines quote parameters for subscribtion
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SubscribeQuotesParameters.SymbolId">
            <summary>
            Symbol Id
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.SubscribeQuotesParameters.SubscribeType">
            <summary>
            Quote type
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SubscribeQuotesParameters.#ctor(System.String,TradingPlatform.BusinessLayer.SubscribeQuoteType)">
            <summary>
            SubscribeQuotesParameters constructor 
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.ModifyOrderRequestParameters.OrderId">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Settings.Condition.ConditionData.ConditionGroups">
            <summary>
            Gets or Sets the groups.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemType">
            <summary>
            SettingItem cast type
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.VisibilityMode">
            <summary>
            SettingItem state
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.DatePickerFormat">
            <summary>
            Specifies the DatePicker time format.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.DatePickerFormat.Date">
            <summary>
            Date only
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.DatePickerFormat.DateTime">
            <summary>
            Date and time
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.DatePickerFormat.Time">
            <summary>
            Time only
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.DatePickerFormat.LongTime">
            <summary>
            Time with seconds
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.DatePickerFormat.LongDateTime">
             <summary>
            
             </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemGroup">
            <summary>
            Typecasts setting as TabControl item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemSeparatorGroup">
            <summary>
            Typecasts setting as GroupBox item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemAccount">
            <summary>
            Typecasts setting as AccountLookup item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemAction">
            <summary>
            Typecasts setting as Button item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemBoolean">
            <summary>
            Typecasts setting as CheckBox item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemBooleanSwitcher">
            <summary>
            Typecasts setting as CheckBox item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemColor">
            <summary>
            Typecasts setting as Color item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemDateTime">
            <summary>
            Typecasts setting as DateTimePicker item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemDouble">
            <summary>
            Typecasts setting as NumericUpDown item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemInteger">
            <summary>
            Typecasts setting as NumericUpDown item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemObject">
            <summary>
            Typecasts setting as AccountLookup item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemPassword">
            <summary>
            Typecasts setting as Password item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemPeriod">
            <summary>
            Typecasts setting as Period item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemSelector">
            <summary>
            Typecasts setting as ComboBox item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemString">
            <summary>
            Typecasts setting as TextBox item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemSymbol">
            <summary>
            Typecasts setting as SymbolLookup item
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SettingItemTextArea">
            <summary>
            Typecasts setting as TextBox item
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Side,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Side"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="side"><see cref="T:TradingPlatform.BusinessLayer.Side"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,TradingPlatform.BusinessLayer.Side,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>, <see cref="T:TradingPlatform.BusinessLayer.Account"/> and <see cref="T:TradingPlatform.BusinessLayer.Side"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="side"><see cref="T:TradingPlatform.BusinessLayer.Side"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Side,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Side"/>
            </summary>
            <param name="side"><see cref="T:TradingPlatform.BusinessLayer.Side"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.TimeInForce,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="timeInForce"><see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,TradingPlatform.BusinessLayer.TimeInForce,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>, <see cref="T:TradingPlatform.BusinessLayer.Account"/> and <see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="timeInForce"><see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.TimeInForce,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/>
            </summary>
            <param name="timeInForce"><see cref="T:TradingPlatform.BusinessLayer.TimeInForce"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.OrderTypeBehavior,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="orderTypeBehavior"><see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,TradingPlatform.BusinessLayer.OrderTypeBehavior,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>, <see cref="T:TradingPlatform.BusinessLayer.Account"/> and <see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="orderTypeBehavior"><see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CancelOrders(TradingPlatform.BusinessLayer.OrderTypeBehavior,System.String)">
            <summary>
            Cancel all pending <see cref="T:TradingPlatform.BusinessLayer.Order"/>s by <see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/>
            </summary>
            <param name="orderTypeBehavior"><see cref="T:TradingPlatform.BusinessLayer.OrderTypeBehavior"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(TradingPlatform.BusinessLayer.Side,System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Side"/>
            </summary>
            <param name="side"><see cref="T:TradingPlatform.BusinessLayer.Side"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositions(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Side,System.String)">
            <summary>
            Close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Side"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="side"><see cref="T:TradingPlatform.BusinessLayer.Side"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositivePositions(System.String)">
            <summary>
            Close all positive <see cref="T:TradingPlatform.BusinessLayer.Position"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ClosePositivePositions(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Close all positive <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CloseNegativePositions(System.String)">
            <summary>
            Close all negative <see cref="T:TradingPlatform.BusinessLayer.Position"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.CloseNegativePositions(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Close all negative <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ReversePositions(System.String)">
            <summary>
            Reverse all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ReversePositions(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Reverse all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ReversePositions(TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Reverse all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns>List of <see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.ReversePosition(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Reverse <see cref="T:TradingPlatform.BusinessLayer.Position"/> by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns><see cref="T:TradingPlatform.BusinessLayer.TradingOperationResult"/></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.Flatten(System.String)">
            <summary>
            Cancel all <see cref="T:TradingPlatform.BusinessLayer.Order"/>s and close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s
            </summary>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.Flatten(TradingPlatform.BusinessLayer.Symbol,System.String)">
            <summary>
            Cancel all <see cref="T:TradingPlatform.BusinessLayer.Order"/>s and close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.Flatten(TradingPlatform.BusinessLayer.Symbol,TradingPlatform.BusinessLayer.Account,System.String)">
            <summary>
            Cancel all <see cref="T:TradingPlatform.BusinessLayer.Order"/>s and close all <see cref="T:TradingPlatform.BusinessLayer.Position"/>s by <see cref="T:TradingPlatform.BusinessLayer.Symbol"/> and <see cref="T:TradingPlatform.BusinessLayer.Account"/>
            </summary>
            <param name="symbol"><see cref="T:TradingPlatform.BusinessLayer.Symbol"/></param>
            <param name="account"><see cref="T:TradingPlatform.BusinessLayer.Account"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.BreakEven(TradingPlatform.BusinessLayer.Position,System.String)">
            <summary>
            Modify SL to breakeven price
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.BreakEven(TradingPlatform.BusinessLayer.Position,System.Int32,System.String)">
            <summary>
            Modify SL to breakeven price with certain additional offset
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="offset">offset in ticks</param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.BreakEven(TradingPlatform.BusinessLayer.Position,System.Collections.Generic.IList{TradingPlatform.BusinessLayer.SettingItem},System.String)">
            <summary>
            Modify SL to breakeven price
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="additionalParameters">list of <see cref="T:TradingPlatform.BusinessLayer.SettingItem"/>s that will be used for order placing</param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.AdjustSlTp(TradingPlatform.BusinessLayer.Position,System.Threading.CancellationToken,System.String)">
            <summary>
            Adjust SL/TP for given <see cref="T:TradingPlatform.BusinessLayer.Position"/>
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.AdjustStopLoss(TradingPlatform.BusinessLayer.Position,System.Collections.Generic.IList{TradingPlatform.BusinessLayer.Order},TradingPlatform.BusinessLayer.SlTpHolder,System.Threading.CancellationToken,System.String)">
            <summary>
            Adjust stop loss for given <see cref="T:TradingPlatform.BusinessLayer.Position"/>
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="stops">list of <see cref="T:TradingPlatform.BusinessLayer.Order"/>s</param>
            <param name="initialStopLoss">initial stop loss parameters (optional)</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AdvancedTradingOperations.AdjustTakeProfit(TradingPlatform.BusinessLayer.Position,System.Collections.Generic.IList{TradingPlatform.BusinessLayer.Order},TradingPlatform.BusinessLayer.SlTpHolder,System.Threading.CancellationToken,System.String)">
            <summary>
            Adjust take profit for given <see cref="T:TradingPlatform.BusinessLayer.Position"/>
            </summary>
            <param name="position"><see cref="T:TradingPlatform.BusinessLayer.Position"/></param>
            <param name="takes">list of <see cref="T:TradingPlatform.BusinessLayer.Order"/>s</param>
            <param name="initialTakeProfit">initial take profit parameters (optional)</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/></param>
            <param name="sendingSource">the name of the initiator of the call (optional)</param>
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AllowedResult">
            <summary>
            The allowed result.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AllowedResult.Status">
            <summary>
            Gets the status.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AllowedResult.Reason">
            <summary>
            Gets the reason.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AllowedResult.GetAllowedResult">
            <summary>
            Get the allowed result.
            </summary>
            <returns>An AllowedResult.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AllowedResult.GetNotAllowedResult(System.String)">
            <summary>
            Gets the not allowed result.
            </summary>
            <param name="reason">The reason.</param>
            <returns>An AllowedResult.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.ActionWrapper">
            <summary>
            The action wrapper.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ActionWrapper.Items">
            <summary>
            Gets or Sets the items.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ActionWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Utils.ActionWrapper"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ActionWrapper.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)">
            <summary>
            Froms the X element.
            </summary>
            <param name="element">The element.</param>
            <param name="deserializationInfo">The deserialization info.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ActionWrapper.ToXElement">
            <summary>
            Tos the X element.
            </summary>
            <returns>A XElement.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator">
            <summary>
            The aggressor flag calculator.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator.CollectBidAsk(System.String,System.Int64,System.Double,System.Double)">
            <summary>
            Collect bid ask.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="timeTicks">The time ticks.</param>
            <param name="bid">The bid.</param>
            <param name="ask">The ask.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator.CalculateAggressorFlag(System.String,System.Int64,System.Double)">
            <summary>
            Calculate aggressor flag.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="timeTicks">The time ticks.</param>
            <param name="last">The last.</param>
            <returns>An AggressorFlag.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AggressorFlagCalculator.CalculateAggressorFlag(System.Double,System.Double,System.Double)">
            <summary>
            Calculate aggressor flag.
            </summary>
            <param name="previousBid">The previous bid.</param>
            <param name="previousAsk">The previous ask.</param>
            <param name="last">The last.</param>
            <returns>An AggressorFlag.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.Alert">
            <summary>
            The alert.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.Alert.Text">
            <summary>
            Gets or Sets the text.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.Alert.SymbolName">
            <summary>
            Gets or Sets the symbol name.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.Alert.ConnectionName">
            <summary>
            Gets or Sets the connection name.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.Alert.ActionOnConfirm">
            <summary>
            Gets or Sets the action on confirm.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.Alert.Name">
            <summary>
            Gets or Sets the name.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.AlertData">
            <summary>
            The alert data.
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.Utils.AlertData.Name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.Columns">
            <summary>
            Gets or Sets the columns.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.Groups">
            <summary>
            Gets or Sets the groups.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.Actions">
            <summary>
            Gets or Sets the actions.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.Enabled">
            <summary>
            Gets or Sets a value indicating whether enabled.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.TableDictionary">
            <summary>
            Gets or Sets the table dictionary.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.IsColoringAlert">
            <summary>
            Gets or Sets a value indicating whether coloring is alert.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.FilterAlert">
            <summary>
            Gets or Sets a value indicating whether filter alert.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.SearchAlert">
            <summary>
            Gets or Sets a value indicating whether search alert.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.ToRemove">
            <summary>
            Gets or Sets a value indicating whether to remove.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.ID">
            <summary>
            Gets or Sets the ID.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.CommandSender">
            <summary>
            Gets or Sets the command sender.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.AlertData.NeedConfirmTrading">
            <summary>
            Gets or Sets a value indicating whether need confirm trading.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AlertData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Utils.AlertData"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AlertData.ToXElement">
            <summary>
            To the XML element.
            </summary>
            <returns>A XElement.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.AlertData.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)">
            <summary>
            From the XML element.
            </summary>
            <param name="element">The element.</param>
            <param name="deserializationInfo">The deserialization info.</param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol">
            <summary>
            The arbitrage symbol.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.Index">
            <summary>
            Gets or Sets the index.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.UniqueID">
            <summary>
            Gets the unique ID.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.SymbolId">
            <summary>
            Gets the symbol id.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.IsSelected">
            <summary>
            Gets or Sets a value indicating whether is selected.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.Symbol">
            <summary>
            Gets or Sets the symbol.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.Account">
            <summary>
            Gets or Sets the account.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.Commission">
            <summary>
            Gets or Sets the commission.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol"/> class.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.CompareTo(TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol)">
            <summary>
            Compare to.
            </summary>
            <param name="other">The other.</param>
            <returns>An int.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.FromXElement(System.Xml.Linq.XElement,TradingPlatform.BusinessLayer.Serialization.DeserializationInfo)">
            <summary>
            Froms the X element.
            </summary>
            <param name="element">The element.</param>
            <param name="deserializationInfo">The deserialization info.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ArbitrageSymbol.ToXElement">
            <summary>
            Tos the X element.
            </summary>
            <returns>A XElement.</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.ActionBufferedProcessor">
            <summary>
            The action buffered processor.
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.ActionBufferedProcessorWithPriority">
            <summary>
            The action buffered processor with priority.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.ActionBufferedProcessorWithPriority.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TradingPlatform.BusinessLayer.Utils.ActionBufferedProcessorWithPriority"/> class.
            </summary>
            <param name="threadsCount">The threads count.</param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1">
            <summary>
            The buffered processor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.State">
            <summary>
            Gets the state.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.QueueDepth">
            <summary>
            Gets the queue depth.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="subject">The subject.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.BufferedProcessor`1.WaitAllMessagesProcess(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Wait all messages process.
            </summary>
            <param name="externalToken">The external token.</param>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.Utils.BufferedProcessorState">
            <summary>
            The buffered processor state.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.TasksHolder`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.Utils.TimeFrameConfig.DefaultAggregation">
            <summary>
            Агрегація, що буде використовуватись як дефолтна для "TimeFrameScreen".
            Повинна відповідати агрегації чарта.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.Utils.HistoryStepsCalculator.AddMonths(System.DateTime,System.Int32)">
             <summary>
             https://stackoverflow.com/questions/3060381/datetime-addmonths-adding-only-month-not-days
            
             Проблема:
             (29 Feb).AddMonth(1) = 29 March
             </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AdvancedTradingOperationResult">
            <summary>
            Defines advanced trading operation respond bundle
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdvancedTradingOperationResult.Status">
            <summary>
            Respond operation state <see cref="T:TradingPlatform.BusinessLayer.AdvancedTradingOperationResultStatus"/>
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdvancedTradingOperationResult.Message">
            <summary>
            Respond message
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdvancedTradingOperationResult.Value">
            <summary>
            Respond value (optional)
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.AdvancedTradingOperationResult.Details">
            <summary>
            Details of sub-operations
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IBrandingInformation.GetResourceNames">
            <summary>
            Get all available custom resources
            </summary>        
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IBrandingInformation.GetResource(System.String)">
            <summary>
            Get custom resource stream by name
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IBrandingInformation.IsItemHidden(System.String,System.String)">
            <summary>
            Check whether specified items was hidden by branding specification
            </summary>        
            <returns></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AssemblyLoader">
            <summary>
            The assembly loader.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AssemblyLoader.LoadTypes(System.String,System.Type,System.String,System.IO.SearchOption,System.Boolean,System.Boolean)">
            <summary>
            Load types.
            </summary>
            <param name="folderName">The folder name.</param>
            <param name="targetType">The target type.</param>
            <param name="assemblyNameFilter">The assembly name filter.</param>
            <param name="searchOption">The search option.</param>
            <param name="loadInMemory">If true, load in memory.</param>
            <param name="allowLoadingReferences">If true, allow loading references.</param>
            <returns><![CDATA[List<TypeWrapper>]]></returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SubscribeQuoteType">
            <summary>
            Quote type for subscribtion dictum
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.SubscribeQuoteType.Quote">
            <summary>
            Level 1 quote
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.SubscribeQuoteType.Level2">
            <summary>
            Level 2 quote
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.SubscribeQuoteType.Last">
            <summary>
            Last
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.SubscribeQuoteType.Mark">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.TradingOperationResultStatus">
            <summary>
            Trading operation state
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AdvancedTradingOperationResultStatus">
            <summary>
            Complex trading operation state
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.AggressorFlagCalculatorExtensions">
            <summary>
            The aggressor flag calculator extensions.
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AggressorFlagCalculatorExtensions.CollectBidAsk(TradingPlatform.BusinessLayer.Utils.IAggressorFlagCalculator,TradingPlatform.BusinessLayer.Quote)">
            <summary>
            Collect bid ask.
            </summary>
            <param name="calculator">The calculator.</param>
            <param name="quote">The quote.</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.AggressorFlagCalculatorExtensions.CalculateAggressorFlag(TradingPlatform.BusinessLayer.Utils.IAggressorFlagCalculator,TradingPlatform.BusinessLayer.Last)">
            <summary>
            Calculate aggressor flag.
            </summary>
            <param name="calculator">The calculator.</param>
            <param name="last">The last.</param>
            <returns>An AggressorFlag.</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.GetPrice(TradingPlatform.BusinessLayer.HistoricalData,TradingPlatform.BusinessLayer.PriceType,System.Int32)">
            <summary>
            Gets the price from historical data
            </summary>
            <param name="priceType"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Bid(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Bid price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Ask(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Ask price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Last(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Last price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Open(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Open price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.High(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get High price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Low(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Low price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Close(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Close price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Median(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Median price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Typical(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Typical price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Weighted(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Weighted price
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Volume(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Volume
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.QuoteAssetVolume(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Volume in quoting asset
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Ticks(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Ticks
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.OpenInterest(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Open interest
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.FundingRate(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Funding rate
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.HistoricalDataExtensions.Time(TradingPlatform.BusinessLayer.HistoricalData,System.Int32)">
            <summary>
            Get Time
            </summary>
            <param name="offset">Offset value</param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.IntervalExtensions.Optimize``1(System.Collections.Generic.IEnumerable{TradingPlatform.BusinessLayer.Utils.Interval{``0}})">
            <summary>
            Combines intersecting intervals
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.SettingItemExtensions.GetItemsByPath(System.Collections.Generic.IEnumerable{TradingPlatform.BusinessLayer.SettingItem},System.String[])">
            <summary>
            Get all settings or particular settings by provided hierarchy path
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.StrategyExtensions.LogInfo(TradingPlatform.BusinessLayer.Strategy,System.String)">
            <summary>
            Write info log message
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.StrategyExtensions.LogTrading(TradingPlatform.BusinessLayer.Strategy,System.String)">
            <summary>
            Write trading log message
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.StrategyExtensions.LogError(TradingPlatform.BusinessLayer.Strategy,System.String)">
            <summary>
            Write error log message
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GlobalVariables.VariableLifetime">
            <summary>
            Variable lifetime
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.GlobalVariables.VariableLifetime.SaveSession">
            <summary>
            The variable will be removed on exit
            </summary>
        </member>
        <member name="F:TradingPlatform.BusinessLayer.GlobalVariables.VariableLifetime.SaveFile">
            <summary>
            The variable will be written to file
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariable">
            <summary>
            Global variable entry
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariable.Name">
             <summary>
             Variable name
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     List&lt;GlobalVariable&gt; global_List=new List&lt;GlobalVariable&gt;();
             
                     public override void Init()
                     {             
                          if(GlobalVariablesManager.Count()>0)
                          {
                             global_List=GlobalVariablesManager.GetGlobalVariablesList();
                             foreach (var el in global_List)
                             {
                             Print(el.Name);
                             Print(el.Value);
                             }
                          }
                     }
                 }
            }
             </code>
             </span>
             </example>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariable.Value">
             <summary>
             Variable value
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     List&lt;GlobalVariable&gt; global_List=new List&lt;GlobalVariable&gt;();
                     public override void Init()
                     {             
                          if(GlobalVariablesManager.Count()>0)
                          {
                             global_List=GlobalVariablesManager.GetGlobalVariablesList();
                             foreach (var el in global_List)
                             {
                             Print(el.Name);
                             Print(el.Value);
                             }
                          }
                     }
                 }
            }
             </code>
             </span>
             </example>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariable.#ctor(System.String,System.Object)">
             <summary>
             Initializes new variable
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     List&lt;GlobalVariable&gt; global_List=new List&lt;GlobalVariable&gt;();
                     public override void Init()
                     {             
                          if(GlobalVariablesManager.Count()>0)
                         {
                             global_List=GlobalVariablesManager.GetGlobalVariablesList();
                             foreach (var el in global_List)
                             {
                                //Simplified way to retrieve global variable value
                                el.GlobalVariable("new_global_variable_period", period)
             
                                //However, to obtain certain variable, which belongs to indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc. Follow SetValue() example.
                             }
                         }
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
             <param name="value">Variable value</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.SetValue(System.String,System.Object,TradingPlatform.BusinessLayer.GlobalVariables.VariableLifetime)">
             <summary>
             Sets variable value to a global storage 
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     GlobalVariablesManager(){
                          base.ProjectName = "GlobalVariablesManager";
                          base.Password=GetHashedPassword(ProjectName);              
                     }
             
                    [InputParameter("Period", 0, 1, 9999)]
                     public int period = 5;
             
                     public override void OnQuote()
                     {
                          //Simplified way to store a global variable   
             
                          GlobalVariablesManager.SetValue("global_variable_period", period, VariableLifetime.SaveSession);
             
                          //However, to indicate any variable belongs to certain indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc.
                          
                          GlobalVariablesManager.SetValue("global_variable_period" +Symbols.Current.Name+period+Password, period, VariableLifetime.SaveSession);
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
             <param name="value">New value</param>
             <param name="lifetime">Variable lifetime</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.Remove(System.String)">
             <summary>
             Removes specified variable from global storage
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     public override void Init()
                     {   
                          //Simplified way to remove a global variable   
             
                          GlobalVariablesManager.Remove("global_variable_period");
             
                          //However, to remove certain variable, which belongs to indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc. Follow SetValue() example.
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.Count">
             <summary>
             Returns variables' count in global storage
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     public override void Init()
                     {            
                         if(GlobalVariablesManager.Count()>0)
                         {
                             Print("Your session obtains "+GlobalVariablesManager.Count()+" global variables");
                         }
                     }
                 }
            }
             </code>
             </span>
             </example>
             <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.RemoveAll">
             <summary>
             Removes all variables from global storage
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     public override void Init()
                     {      
                         GlobalVariablesManager.RemoveAll();     
              
                         if(GlobalVariablesManager.Count()==0)
                         {
                             Print("Your session does not have any global variables");
                         }
                     }
                 }
            }
             </code>
             </span>
             </example>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.Exists(System.String)">
             <summary>
             Check if variable with specified name exists in global storage
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 { 
                     public override void Init()
                     {      
                          //Simplified way to check an existance of a global variable  
                  
                          if(GlobalVariablesManager.Exists("global_variable_period"))
                             Print("Your session has this global variable");
                          else
                             GlobalVariablesManager.SetValue("global_variable_period");         
             
                          //However, to obtain certain variable, which belongs to indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc. Follow SetValue() example.
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
             <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.GetValue(System.String)">
             <summary>
             Returns variable value by name
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 { 
                     public override void Init()
                     {  
                         //Simplified way to retrieve global variable value
             
                          if(GlobalVariablesManager.Exists("global_variable_period"))
                             //Always perform a type casting before assigning any variable from global storage
                             period = (int)GlobalVariablesManager.GetValue("global_variable_period"); 
             
                         //However, to obtain certain variable, which belongs to indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc. Follow SetValue() example.
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
             <returns>Variable value</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.TryGetValue(System.String,System.Object@)">
             <summary>
             Performs a variable assigning from a global storage if such name exists in a scope
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {  
                     public override void Init()
                     {  
                          int new_period;
                             
                          //Simplified way to retrieve global variable value
             
                          if(GlobalVariablesManager.TryGetValue("global_variable_period"))
                             Print("New variable is assigned from globals: " + new_period);
                          if(new_period==period)
                             Print("Matching, no need to re-assign globals: ");    
                          else
                             GlobalVariablesManager.SetValue("global_variable_period", period, VariableLifetime.SaveSession);   
             
                          //However, to obtain certain variable, which belongs to indicator/strategy and to avoid unexpected erasing of data the best practice is to provide to a key holder multiple details such as name, params, hashed password etc. Follow SetValue() example.
                     }
                 }
            }
             </code>
             </span>
             </example>
             <param name="name">Variable name</param>
             <param name="obj">Variable value</param>
             <returns>True if variable exists</returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.Flush">
             <summary>
             Saves all serializable variables to disk
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     Connection myConnection = Connection.CurrentConnection;
                     public override void OnQuote()
                     {             
                          if(myConnection.Status==Disconnected)
                             GlobalVariablesManager.Flush();
                     }
                 }
            }
             </code>
             </span>
             </example>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.GlobalVariables.GlobalVariablesManager.GetGlobalVariablesList">
             <summary>
             Returns all global variables as list
             </summary>
             <example>
             <span id="Example 1">
             <code>
            using System;
            using System.Text;
            using PTLRuntime.NETScript;
            
            namespace GlobalVariablesManager
            {
                 public class GlobalVariablesManager : NETIndicator
                 {
                     List &lt;GlobalVariable&gt;global_List=new List&lt;GlobalVariable&gt;(); 
                     public override void Init()
                     {             
                          if(GlobalVariablesManager.Count()>0)
                             global_List=GlobalVariablesManager.GetGlobalVariablesList();
             
                          foreach (var el in global_List)
                          {
                             Print(el.Name);
                          }
                     }
                 }
            }
             </code>
             </span>
             </example>
             <returns>Collection of global variables</returns>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GlobalVariables.NonSerializableObjectException">
            <summary>
            Object is non-serializable
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.GlobalVariables.TooBigObjectException">
            <summary>
            Object too big
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.ApplicationLoggerEvent">
            <summary>
            The application logger event.
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.LoggerManager.CurrentLogLevel">
            <summary>
            Current logging level
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LoggerManager.Log(System.String,TradingPlatform.BusinessLayer.LoggingLevel,System.String)">
            <summary>
            Sets logs with custom messag, logging level, connection name
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LoggerManager.Log(System.Exception,System.String,TradingPlatform.BusinessLayer.LoggingLevel,System.String)">
            <summary>
            Sets logs with exception and custom message (optional), logging level, connection name
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LoggerManager.Log(TradingPlatform.BusinessLayer.ILoggable,TradingPlatform.BusinessLayer.LoggingLevel,System.String)">
            <summary>
            Sets logs with objects inherited from ILoggable interface,logging level, connection name
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LoggerManager.AddLogLevel(TradingPlatform.BusinessLayer.LoggingLevel)">
            <summary>
            Sets a log level in case of deep debug
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.LoggerManager.RemoveLogLevel(TradingPlatform.BusinessLayer.LoggingLevel)">
            <summary>
            Remove a log level if one has not needed already
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.EmailParameters">
            <summary>
            Все параметры, которые могут использоваться при отправке email
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.MailUtils.SendAsync(TradingPlatform.BusinessLayer.EmailParameters)">
            <summary>
            Отправит сообщение по E-mail
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.OnLocaleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.key(System.String)">
            <summary>
            Чисто, як маркер для парсера xgettext.exe
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.IsHidden(System.String,System.String,System.String)">
            <summary>
            Check, whether current translation equal to hidden
            </summary>        
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.UnRegisterPlugin(System.String)">
            <summary>
            
            </summary>
            <param name="pluginName"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.RegisterPlugin(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pluginName"></param>
            <param name="location"></param>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.loc.InitializeCoreLocalizer">
            <summary>
            
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.SymbolList">
            <summary>
            Allows to save Symbols into named lists
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.TimeSync.NTPClient">
             <summary>
             from:
             http://www.codeguru.com/csharp/csharp/cs_date_time/timeroutines/article.php/c4207/C-SNTP-Client.htm
             +++ добавлен диспозе, подправлен ToString(), убран лишний метод.
             +++ ReceiveTimeoutбSendTimeout
             
             NTPClient is a C# class designed to connect to time servers on the Internet.
             The implementation of the protocol is based on the RFC 2030.
             
             Public class members:
            
             LeapIndicator - Warns of an impending leap second to be inserted/deleted in the last
             minute of the current day. (See the _LeapIndicator enum)
             
             VersionNumber - Version number of the protocol (3 or 4).
             
             Mode - Returns mode. (See the _Mode enum)
             
             Stratum - Stratum of the clock. (See the _Stratum enum)
             
             PollInterval - Maximum interval between successive messages.
             
             Precision - Precision of the clock.
             
             RootDelay - Round trip time to the primary reference source.
             
             RootDispersion - Nominal error relative to the primary reference source.
             
             ReferenceTimestamp - The time at which the clock was last set or corrected.
             
             OriginateTimestamp - The time at which the request departed the client for the server.
             
             ReceiveTimestamp - The time at which the request arrived at the server.
             
             Transmit Timestamp - The time at which the reply departed the server for client.
             
             RoundTripDelay - The time between the departure of request and arrival of reply.
             
             LocalClockOffset - The offset of the local clock relative to the primary reference
             source.
             
             Initialize - Sets up data structure and prepares for connection.
             
             Connect - Connects to the time server and populates the data structure.
             
             IsResponseValid - Returns true if received data is valid and if comes from
             a NTP-compliant time server.
             
             ToString - Returns a string representation of the object.
             
             -----------------------------------------------------------------------------
             Structure of the standard NTP header (as described in RFC 2030)
                                   1                   2                   3
               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                          Root Delay                           |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                       Root Dispersion                         |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                     Reference Identifier                      |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Reference Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Originate Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Receive Timestamp (64)                     |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Transmit Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                 Key Identifier (optional) (32)                |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                                                               |
              |                 Message Digest (optional) (128)               |
              |                                                               |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             -----------------------------------------------------------------------------
             
             NTP Timestamp Format (as described in RFC 2030)
                                     1                   2                   3
                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Seconds                             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Seconds Fraction (0-padded)                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.TimeSync.NTPClient.Connect">
            <summary>
            Connect to the time server
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.TradingOperationResult">
            <summary>
            Defines a trading operation respond bundle
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.TradingOperationResult.Status">
            <summary>
            Respond operation state
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.TradingOperationResult.Message">
            <summary>
            Respond message
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.TradingOperationResult.OrderId">
            <summary>
            Respond order id
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.VolumeAnalysisCalculationParameters">
            <summary>
            Provides VA calculation parameters
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.VolumeAnalysisCalculationRequest">
            <summary>
            Provides VA calculation request per <see cref="T:TradingPlatform.BusinessLayer.Symbol"/>
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.VolumeAnalysisData.Total">
            <summary>
            Summary calculated Volume info
            </summary>
        </member>
        <member name="P:TradingPlatform.BusinessLayer.VolumeAnalysisData.PriceLevels">
            <summary>
            Volume info for each price
            </summary>
        </member>
        <member name="E:TradingPlatform.BusinessLayer.VolumeAnalysisData.ItemUpdated">
            <summary>
            Fire in case of price level was added or existing was updated
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.VolumeAnalysisItem">
            <summary>
            Represent item with Volume Analysis calculation results
            </summary>
        </member>
        <member name="T:TradingPlatform.BusinessLayer.VolumeAnalysisManager">
            <summary>
            Volume Analysis calculations
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.VolumeAnalysisManager.CalculateProfile(TradingPlatform.BusinessLayer.VolumeAnalysisCalculationRequest)">
            <summary>
            Calculate volume profile for requested time range
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.VolumeAnalysisManager.CalculateProfile(TradingPlatform.BusinessLayer.HistoricalData,TradingPlatform.BusinessLayer.VolumeAnalysisCalculationParameters)">
            <summary>
            Calculate volume profile for each bar in History Data
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.VolumeAnalysisManager.CalculateProfile(TradingPlatform.BusinessLayer.Symbol,System.DateTime,System.DateTime)">
            <summary>
            Calculate volume profile for requested time range
            </summary>
        </member>
        <member name="M:TradingPlatform.BusinessLayer.VolumeAnalysisManager.CalculateProfile(TradingPlatform.BusinessLayer.HistoricalData)">
            <summary>
            Calculate volume profile for each bar in History Data
            </summary>
        </member>
        <member name="M:Platform.Utils.Encryptor.EncryptString(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Platform.Utils.Encryptor.DecryptString(System.String)">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
